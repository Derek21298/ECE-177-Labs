
Lab11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b0  00800100  000006dc  00000770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008003b0  008003b0  00000a20  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000051  00000000  00000000  00002565  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000070  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d5d  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008de  00000000  00000000  000033c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004e7  00000000  00000000  00003ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000180  00000000  00000000  0000418c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004c7  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000057d  00000000  00000000  000047d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	13 e0       	ldi	r17, 0x03	; 3
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ed       	ldi	r30, 0xDC	; 220
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 3b       	cpi	r26, 0xB0	; 176
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	a0 eb       	ldi	r26, 0xB0	; 176
  a2:	b3 e0       	ldi	r27, 0x03	; 3
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 3b       	cpi	r26, 0xB7	; 183
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  b2:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <getkey>:

void serialWrite(unsigned char sendByte) {
	
	UCSR0A &= ~(1 << UDRE0);
	while((UCSR0A & (1 << UDRE0)) != (1 << UDRE0));
	UDR0 = sendByte;
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	9f ef       	ldi	r25, 0xFF	; 255
  ce:	00 e1       	ldi	r16, 0x10	; 16
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	e1 e0       	ldi	r30, 0x01	; 1
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	98 01       	movw	r18, r16
  d8:	0a 2e       	mov	r0, r26
  da:	02 c0       	rjmp	.+4      	; 0xe0 <getkey+0x26>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <getkey+0x22>
  e4:	21 b9       	out	0x01, r18	; 1
  e6:	22 b9       	out	0x02, r18	; 2
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	20 b1       	in	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	af 01       	movw	r20, r30
  f2:	06 2e       	mov	r0, r22
  f4:	02 c0       	rjmp	.+4      	; 0xfa <getkey+0x40>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <getkey+0x3c>
  fe:	24 23       	and	r18, r20
 100:	35 23       	and	r19, r21
 102:	42 17       	cp	r20, r18
 104:	53 07       	cpc	r21, r19
 106:	19 f4       	brne	.+6      	; 0x10e <getkey+0x54>
 108:	cb 01       	movw	r24, r22
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	64 30       	cpi	r22, 0x04	; 4
 114:	71 05       	cpc	r23, r1
 116:	51 f7       	brne	.-44     	; 0xec <getkey+0x32>
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	24 96       	adiw	r28, 0x04	; 4
 11c:	a4 30       	cpi	r26, 0x04	; 4
 11e:	b1 05       	cpc	r27, r1
 120:	d1 f6       	brne	.-76     	; 0xd6 <getkey+0x1c>
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <mapkey>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	60 97       	sbiw	r28, 0x10	; 16
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	80 31       	cpi	r24, 0x10	; 16
 142:	98 f4       	brcc	.+38     	; 0x16a <mapkey+0x3e>
 144:	90 e1       	ldi	r25, 0x10	; 16
 146:	ee e0       	ldi	r30, 0x0E	; 14
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	de 01       	movw	r26, r28
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	01 90       	ld	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	9a 95       	dec	r25
 154:	e1 f7       	brne	.-8      	; 0x14e <mapkey+0x22>
 156:	e1 e0       	ldi	r30, 0x01	; 1
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ec 0f       	add	r30, r28
 15c:	fd 1f       	adc	r31, r29
 15e:	e8 0f       	add	r30, r24
 160:	f1 1d       	adc	r31, r1
 162:	87 fd       	sbrc	r24, 7
 164:	fa 95       	dec	r31
 166:	80 81       	ld	r24, Z
 168:	01 c0       	rjmp	.+2      	; 0x16c <mapkey+0x40>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	60 96       	adiw	r28, 0x10	; 16
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <serialInit>:
 17e:	e0 ec       	ldi	r30, 0xC0	; 192
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24
 188:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 19e:	08 95       	ret

000001a0 <delaycycles>:
		delaycycles(1000);
	}
}

void delaycycles(unsigned int cycles) {
	TCNT1 = -(cycles - MAGIC);
 1a0:	2e e1       	ldi	r18, 0x1E	; 30
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	28 1b       	sub	r18, r24
 1a6:	39 0b       	sbc	r19, r25
 1a8:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ac:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIFR1 = (1 << TOV1);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	86 bb       	out	0x16, r24	; 22
	while((TIFR1 & (1 << TOV1)) != (1 << TOV1));
 1b4:	b0 9b       	sbis	0x16, 0	; 22
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <delaycycles+0x14>
}
 1b8:	08 95       	ret

000001ba <mydelayms>:
	UCSR0A &= ~(1 << UDRE0);
	while((UCSR0A & (1 << UDRE0)) != (1 << UDRE0));
	UDR0 = sendByte;
	
}
void mydelayms(unsigned int ms) {
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	for(int i = 0; i < ms; i++) {
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	59 f0       	breq	.+22     	; 0x1dc <mydelayms+0x22>
 1c6:	8c 01       	movw	r16, r24
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
		delaycycles(1000);
 1cc:	88 ee       	ldi	r24, 0xE8	; 232
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <delaycycles>
	while((UCSR0A & (1 << UDRE0)) != (1 << UDRE0));
	UDR0 = sendByte;
	
}
void mydelayms(unsigned int ms) {
	for(int i = 0; i < ms; i++) {
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	c0 17       	cp	r28, r16
 1d8:	d1 07       	cpc	r29, r17
 1da:	c1 f7       	brne	.-16     	; 0x1cc <mydelayms+0x12>
		delaycycles(1000);
	}
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <playnote>:
void delaycycles(unsigned int cycles) {
	TCNT1 = -(cycles - MAGIC);
	TIFR1 = (1 << TOV1);
	while((TIFR1 & (1 << TOV1)) != (1 << TOV1));
}
void playnote(struct note n){
 1e6:	4f 92       	push	r4
 1e8:	5f 92       	push	r5
 1ea:	6f 92       	push	r6
 1ec:	7f 92       	push	r7
 1ee:	8f 92       	push	r8
 1f0:	9f 92       	push	r9
 1f2:	af 92       	push	r10
 1f4:	bf 92       	push	r11
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
	long int speakerToggle;
	long int toggleTime;
	long int i;
	
	speakerToggle = (frequency[n.notenum] * n.duration) / 8;
 1fe:	e8 2f       	mov	r30, r24
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e2 5e       	subi	r30, 0xE2	; 226
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	e0 80       	ld	r14, Z
 20c:	f1 80       	ldd	r15, Z+1	; 0x01
 20e:	9e 9d       	mul	r25, r14
 210:	20 01       	movw	r4, r0
 212:	9f 9d       	mul	r25, r15
 214:	50 0c       	add	r5, r0
 216:	11 24       	eor	r1, r1
 218:	56 94       	lsr	r5
 21a:	47 94       	ror	r4
 21c:	56 94       	lsr	r5
 21e:	47 94       	ror	r4
 220:	56 94       	lsr	r5
 222:	47 94       	ror	r4
 224:	61 2c       	mov	r6, r1
 226:	71 2c       	mov	r7, r1
	toggleTime = 500000 / frequency[n.notenum];
 228:	97 01       	movw	r18, r14
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	60 e2       	ldi	r22, 0x20	; 32
 230:	71 ea       	ldi	r23, 0xA1	; 161
 232:	87 e0       	ldi	r24, 0x07	; 7
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 2b 03 	call	0x656	; 0x656 <__divmodsi4>
 23a:	49 01       	movw	r8, r18
 23c:	5a 01       	movw	r10, r20
	
	if(frequency[n.notenum] == 0) {
 23e:	ef 28       	or	r14, r15
 240:	21 f4       	brne	.+8      	; 0x24a <playnote+0x64>
		mydelayms(125);
 242:	8d e7       	ldi	r24, 0x7D	; 125
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 dd 00 	call	0x1ba	; 0x1ba <mydelayms>
	}
	
	for(i = 0; i < speakerToggle; i++) {
 24a:	14 14       	cp	r1, r4
 24c:	15 04       	cpc	r1, r5
 24e:	16 04       	cpc	r1, r6
 250:	17 04       	cpc	r1, r7
 252:	ac f4       	brge	.+42     	; 0x27e <playnote+0x98>
 254:	c1 2c       	mov	r12, r1
 256:	d1 2c       	mov	r13, r1
 258:	76 01       	movw	r14, r12
		PORTD |= 0b00000100;
 25a:	5a 9a       	sbi	0x0b, 2	; 11
		delaycycles(toggleTime);
 25c:	c4 01       	movw	r24, r8
 25e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <delaycycles>
		PORTD &= ~0b0000100;
 262:	5a 98       	cbi	0x0b, 2	; 11
		delaycycles(toggleTime);
 264:	c4 01       	movw	r24, r8
 266:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <delaycycles>
	
	if(frequency[n.notenum] == 0) {
		mydelayms(125);
	}
	
	for(i = 0; i < speakerToggle; i++) {
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	c8 1a       	sub	r12, r24
 26e:	d8 0a       	sbc	r13, r24
 270:	e8 0a       	sbc	r14, r24
 272:	f8 0a       	sbc	r15, r24
 274:	c4 14       	cp	r12, r4
 276:	d5 04       	cpc	r13, r5
 278:	e6 04       	cpc	r14, r6
 27a:	f7 04       	cpc	r15, r7
 27c:	74 f3       	brlt	.-36     	; 0x25a <playnote+0x74>
		PORTD |= 0b00000100;
		delaycycles(toggleTime);
		PORTD &= ~0b0000100;
		delaycycles(toggleTime);
	}
	mydelayms(10);
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 dd 00 	call	0x1ba	; 0x1ba <mydelayms>
}
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	af 90       	pop	r10
 292:	9f 90       	pop	r9
 294:	8f 90       	pop	r8
 296:	7f 90       	pop	r7
 298:	6f 90       	pop	r6
 29a:	5f 90       	pop	r5
 29c:	4f 90       	pop	r4
 29e:	08 95       	ret

000002a0 <playsong>:
void playsong(const struct song* s) {
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
	int i;
	
	for(i = 0; i < s->numnotes; i++) {
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 81       	ld	r18, Z
 2ac:	22 23       	and	r18, r18
 2ae:	99 f0       	breq	.+38     	; 0x2d6 <playsong+0x36>
 2b0:	8c 01       	movw	r16, r24
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
		playnote(s->thenotes[i]);
 2b6:	fe 01       	movw	r30, r28
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e0 0f       	add	r30, r16
 2be:	f1 1f       	adc	r31, r17
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	92 81       	ldd	r25, Z+2	; 0x02
 2c4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <playnote>
	mydelayms(10);
}
void playsong(const struct song* s) {
	int i;
	
	for(i = 0; i < s->numnotes; i++) {
 2c8:	21 96       	adiw	r28, 0x01	; 1
 2ca:	f8 01       	movw	r30, r16
 2cc:	20 81       	ld	r18, Z
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	c2 17       	cp	r28, r18
 2d2:	d3 07       	cpc	r29, r19
 2d4:	84 f3       	brlt	.-32     	; 0x2b6 <playsong+0x16>
		playnote(s->thenotes[i]);
	}
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <main>:
void playANote(const unsigned int f);


int main(void) {
	
	DDRD |= 0b00000100;
 2e0:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= 0b11111100;
 2e2:	8a b1       	in	r24, 0x0a	; 10
 2e4:	8c 7f       	andi	r24, 0xFC	; 252
 2e6:	8a b9       	out	0x0a, r24	; 10
	DDRC &= 0b11111100;
 2e8:	87 b1       	in	r24, 0x07	; 7
 2ea:	8c 7f       	andi	r24, 0xFC	; 252
 2ec:	87 b9       	out	0x07, r24	; 7
	TCCR1B = 0x01;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	serialInit();
 2f4:	0e 94 bf 00 	call	0x17e	; 0x17e <serialInit>
	 
	lcd_init();
 2f8:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_init>
	stdout=&lcd_stdout;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <__iob+0x3>
 304:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <__iob+0x2>
	lcd_iwrite(LCD_CLR);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
		//volatile unsigned char input;
		
		
		//input = serialRead();
		
		while(mapkey(getkey()) != -1);
 30e:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 312:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 316:	8f 3f       	cpi	r24, 0xFF	; 255
 318:	d1 f7       	brne	.-12     	; 0x30e <main+0x2e>
		while(mapkey(getkey()) == -1);
 31a:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 31e:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 322:	8f 3f       	cpi	r24, 0xFF	; 255
 324:	d1 f3       	breq	.-12     	; 0x31a <main+0x3a>
		
		if(mapkey(getkey()) == 1) {
 326:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 32a:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	21 f4       	brne	.+8      	; 0x33a <main+0x5a>
			playsong(&steinsong);
 332:	8d e1       	ldi	r24, 0x1D	; 29
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	0e 94 50 01 	call	0x2a0	; 0x2a0 <playsong>
		}
		if(mapkey(getkey()) == 2){
 33a:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 33e:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	21 f4       	brne	.+8      	; 0x34e <main+0x6e>
			playsong(&marylamb);
 346:	84 e5       	ldi	r24, 0x54	; 84
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <playsong>
		}
		if(mapkey(getkey()) == 3){
 34e:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 352:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	d1 f6       	brne	.-76     	; 0x30e <main+0x2e>
			playsong(&mario);
 35a:	86 ee       	ldi	r24, 0xE6	; 230
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <playsong>
 362:	d5 cf       	rjmp	.-86     	; 0x30e <main+0x2e>

00000364 <lcd_clk>:
 364:	47 9a       	sbi	0x08, 7	; 8
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_clk+0x4>
 36c:	00 00       	nop
 36e:	47 98       	cbi	0x08, 7	; 8
 370:	85 e0       	ldi	r24, 0x05	; 5
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <lcd_clk+0xe>
 376:	00 00       	nop
 378:	08 95       	ret

0000037a <lcd_busy_wait>:
 37a:	84 b1       	in	r24, 0x04	; 4
 37c:	80 7f       	andi	r24, 0xF0	; 240
 37e:	84 b9       	out	0x04, r24	; 4
 380:	95 b1       	in	r25, 0x05	; 5
 382:	29 2f       	mov	r18, r25
 384:	20 71       	andi	r18, 0x10	; 16
 386:	2c 98       	cbi	0x05, 4	; 5
 388:	46 9a       	sbi	0x08, 6	; 8
 38a:	47 9a       	sbi	0x08, 7	; 8
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	8a 95       	dec	r24
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_busy_wait+0x14>
 392:	00 00       	nop
 394:	93 b1       	in	r25, 0x03	; 3
 396:	47 98       	cbi	0x08, 7	; 8
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_busy_wait+0x20>
 39e:	00 00       	nop
 3a0:	47 9a       	sbi	0x08, 7	; 8
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	8a 95       	dec	r24
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <lcd_busy_wait+0x2a>
 3a8:	00 00       	nop
 3aa:	83 b1       	in	r24, 0x03	; 3
 3ac:	92 95       	swap	r25
 3ae:	90 7f       	andi	r25, 0xF0	; 240
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	89 2b       	or	r24, r25
 3b4:	47 98       	cbi	0x08, 7	; 8
 3b6:	95 e0       	ldi	r25, 0x05	; 5
 3b8:	9a 95       	dec	r25
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_busy_wait+0x3e>
 3bc:	00 00       	nop
 3be:	87 fd       	sbrc	r24, 7
 3c0:	e4 cf       	rjmp	.-56     	; 0x38a <lcd_busy_wait+0x10>
 3c2:	46 98       	cbi	0x08, 6	; 8
 3c4:	95 b1       	in	r25, 0x05	; 5
 3c6:	9f 7e       	andi	r25, 0xEF	; 239
 3c8:	92 2b       	or	r25, r18
 3ca:	95 b9       	out	0x05, r25	; 5
 3cc:	94 b1       	in	r25, 0x04	; 4
 3ce:	9f 60       	ori	r25, 0x0F	; 15
 3d0:	94 b9       	out	0x04, r25	; 4
 3d2:	08 95       	ret

000003d4 <lcd_dread>:
 3d4:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_busy_wait>
 3d8:	84 b1       	in	r24, 0x04	; 4
 3da:	80 7f       	andi	r24, 0xF0	; 240
 3dc:	84 b9       	out	0x04, r24	; 4
 3de:	46 9a       	sbi	0x08, 6	; 8
 3e0:	47 9a       	sbi	0x08, 7	; 8
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	8a 95       	dec	r24
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_dread+0x10>
 3e8:	00 00       	nop
 3ea:	23 b1       	in	r18, 0x03	; 3
 3ec:	47 98       	cbi	0x08, 7	; 8
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	8a 95       	dec	r24
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_dread+0x1c>
 3f4:	00 00       	nop
 3f6:	47 9a       	sbi	0x08, 7	; 8
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	8a 95       	dec	r24
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_dread+0x26>
 3fe:	00 00       	nop
 400:	93 b1       	in	r25, 0x03	; 3
 402:	22 95       	swap	r18
 404:	20 7f       	andi	r18, 0xF0	; 240
 406:	89 2f       	mov	r24, r25
 408:	8f 70       	andi	r24, 0x0F	; 15
 40a:	47 98       	cbi	0x08, 7	; 8
 40c:	46 98       	cbi	0x08, 6	; 8
 40e:	94 b1       	in	r25, 0x04	; 4
 410:	9f 60       	ori	r25, 0x0F	; 15
 412:	94 b9       	out	0x04, r25	; 4
 414:	82 2b       	or	r24, r18
 416:	08 95       	ret

00000418 <lcd_dwrite>:
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
 41c:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_busy_wait>
 420:	95 b1       	in	r25, 0x05	; 5
 422:	8c 2f       	mov	r24, r28
 424:	82 95       	swap	r24
 426:	8f 70       	andi	r24, 0x0F	; 15
 428:	90 7f       	andi	r25, 0xF0	; 240
 42a:	98 2b       	or	r25, r24
 42c:	95 b9       	out	0x05, r25	; 5
 42e:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 432:	95 b1       	in	r25, 0x05	; 5
 434:	8c 2f       	mov	r24, r28
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	90 7f       	andi	r25, 0xF0	; 240
 43a:	89 2b       	or	r24, r25
 43c:	85 b9       	out	0x05, r24	; 5
 43e:	cf 91       	pop	r28
 440:	0c 94 b2 01 	jmp	0x364	; 0x364 <lcd_clk>

00000444 <lcd_iwrite>:
 444:	cf 93       	push	r28
 446:	c8 2f       	mov	r28, r24
 448:	2c 98       	cbi	0x05, 4	; 5
 44a:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_busy_wait>
 44e:	95 b1       	in	r25, 0x05	; 5
 450:	8c 2f       	mov	r24, r28
 452:	82 95       	swap	r24
 454:	8f 70       	andi	r24, 0x0F	; 15
 456:	90 7f       	andi	r25, 0xF0	; 240
 458:	98 2b       	or	r25, r24
 45a:	95 b9       	out	0x05, r25	; 5
 45c:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 460:	95 b1       	in	r25, 0x05	; 5
 462:	8c 2f       	mov	r24, r28
 464:	8f 70       	andi	r24, 0x0F	; 15
 466:	90 7f       	andi	r25, 0xF0	; 240
 468:	89 2b       	or	r24, r25
 46a:	85 b9       	out	0x05, r24	; 5
 46c:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 470:	2c 9a       	sbi	0x05, 4	; 5
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <lcd_init>:
 476:	85 b1       	in	r24, 0x05	; 5
 478:	80 7e       	andi	r24, 0xE0	; 224
 47a:	85 b9       	out	0x05, r24	; 5
 47c:	2c 98       	cbi	0x05, 4	; 5
 47e:	46 98       	cbi	0x08, 6	; 8
 480:	47 98       	cbi	0x08, 7	; 8
 482:	84 b1       	in	r24, 0x04	; 4
 484:	8f 61       	ori	r24, 0x1F	; 31
 486:	84 b9       	out	0x04, r24	; 4
 488:	87 b1       	in	r24, 0x07	; 7
 48a:	80 6c       	ori	r24, 0xC0	; 192
 48c:	87 b9       	out	0x07, r24	; 7
 48e:	8f e5       	ldi	r24, 0x5F	; 95
 490:	9a ee       	ldi	r25, 0xEA	; 234
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <lcd_init+0x1c>
 496:	00 c0       	rjmp	.+0      	; 0x498 <lcd_init+0x22>
 498:	00 00       	nop
 49a:	85 b1       	in	r24, 0x05	; 5
 49c:	80 7f       	andi	r24, 0xF0	; 240
 49e:	83 60       	ori	r24, 0x03	; 3
 4a0:	85 b9       	out	0x05, r24	; 5
 4a2:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 4a6:	87 e0       	ldi	r24, 0x07	; 7
 4a8:	90 e2       	ldi	r25, 0x20	; 32
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <lcd_init+0x34>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <lcd_init+0x3a>
 4b0:	00 00       	nop
 4b2:	85 b1       	in	r24, 0x05	; 5
 4b4:	80 7f       	andi	r24, 0xF0	; 240
 4b6:	83 60       	ori	r24, 0x03	; 3
 4b8:	85 b9       	out	0x05, r24	; 5
 4ba:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 4be:	87 ec       	ldi	r24, 0xC7	; 199
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x4c>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0x52>
 4c8:	00 00       	nop
 4ca:	85 b1       	in	r24, 0x05	; 5
 4cc:	80 7f       	andi	r24, 0xF0	; 240
 4ce:	83 60       	ori	r24, 0x03	; 3
 4d0:	85 b9       	out	0x05, r24	; 5
 4d2:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 4d6:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_busy_wait>
 4da:	85 b1       	in	r24, 0x05	; 5
 4dc:	80 7f       	andi	r24, 0xF0	; 240
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	85 b9       	out	0x05, r24	; 5
 4e2:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clk>
 4e6:	84 e2       	ldi	r24, 0x24	; 36
 4e8:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 4ec:	8c e2       	ldi	r24, 0x2C	; 44
 4ee:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 4f2:	88 e0       	ldi	r24, 0x08	; 8
 4f4:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 504:	8f e0       	ldi	r24, 0x0F	; 15
 506:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 50a:	80 ed       	ldi	r24, 0xD0	; 208
 50c:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 510:	2c 9a       	sbi	0x05, 4	; 5
 512:	08 95       	ret

00000514 <lcd_putc>:
 514:	3f 92       	push	r3
 516:	4f 92       	push	r4
 518:	5f 92       	push	r5
 51a:	6f 92       	push	r6
 51c:	7f 92       	push	r7
 51e:	8f 92       	push	r8
 520:	9f 92       	push	r9
 522:	af 92       	push	r10
 524:	bf 92       	push	r11
 526:	cf 92       	push	r12
 528:	df 92       	push	r13
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	e0 97       	sbiw	r28, 0x30	; 48
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	8a 30       	cpi	r24, 0x0A	; 10
 548:	09 f4       	brne	.+2      	; 0x54c <lcd_putc+0x38>
 54a:	81 c0       	rjmp	.+258    	; 0x64e <lcd_putc+0x13a>
 54c:	38 2e       	mov	r3, r24
 54e:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <__data_end>
 552:	81 11       	cpse	r24, r1
 554:	1d c0       	rjmp	.+58     	; 0x590 <lcd_putc+0x7c>
 556:	83 2d       	mov	r24, r3
 558:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_dwrite>
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	e0 96       	adiw	r28, 0x30	; 48
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	df 90       	pop	r13
 57a:	cf 90       	pop	r12
 57c:	bf 90       	pop	r11
 57e:	af 90       	pop	r10
 580:	9f 90       	pop	r9
 582:	8f 90       	pop	r8
 584:	7f 90       	pop	r7
 586:	6f 90       	pop	r6
 588:	5f 90       	pop	r5
 58a:	4f 90       	pop	r4
 58c:	3f 90       	pop	r3
 58e:	08 95       	ret
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 596:	8e 01       	movw	r16, r28
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	4e 01       	movw	r8, r28
 59e:	81 e1       	ldi	r24, 0x11	; 17
 5a0:	88 0e       	add	r8, r24
 5a2:	91 1c       	adc	r9, r1
 5a4:	78 01       	movw	r14, r16
 5a6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_dread>
 5aa:	f7 01       	movw	r30, r14
 5ac:	81 93       	st	Z+, r24
 5ae:	7f 01       	movw	r14, r30
 5b0:	e8 15       	cp	r30, r8
 5b2:	f9 05       	cpc	r31, r9
 5b4:	c1 f7       	brne	.-16     	; 0x5a6 <lcd_putc+0x92>
 5b6:	80 e9       	ldi	r24, 0x90	; 144
 5b8:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 5bc:	64 01       	movw	r12, r8
 5be:	5e 01       	movw	r10, r28
 5c0:	f1 e2       	ldi	r31, 0x21	; 33
 5c2:	af 0e       	add	r10, r31
 5c4:	b1 1c       	adc	r11, r1
 5c6:	74 01       	movw	r14, r8
 5c8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_dread>
 5cc:	f7 01       	movw	r30, r14
 5ce:	81 93       	st	Z+, r24
 5d0:	7f 01       	movw	r14, r30
 5d2:	ea 15       	cp	r30, r10
 5d4:	fb 05       	cpc	r31, r11
 5d6:	c1 f7       	brne	.-16     	; 0x5c8 <lcd_putc+0xb4>
 5d8:	80 ed       	ldi	r24, 0xD0	; 208
 5da:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 5de:	75 01       	movw	r14, r10
 5e0:	3e 01       	movw	r6, r28
 5e2:	f1 e3       	ldi	r31, 0x31	; 49
 5e4:	6f 0e       	add	r6, r31
 5e6:	71 1c       	adc	r7, r1
 5e8:	25 01       	movw	r4, r10
 5ea:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_dread>
 5ee:	f2 01       	movw	r30, r4
 5f0:	81 93       	st	Z+, r24
 5f2:	2f 01       	movw	r4, r30
 5f4:	e6 15       	cp	r30, r6
 5f6:	f7 05       	cpc	r31, r7
 5f8:	c1 f7       	brne	.-16     	; 0x5ea <lcd_putc+0xd6>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 600:	80 e8       	ldi	r24, 0x80	; 128
 602:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 606:	f8 01       	movw	r30, r16
 608:	81 91       	ld	r24, Z+
 60a:	8f 01       	movw	r16, r30
 60c:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_dwrite>
 610:	80 16       	cp	r8, r16
 612:	91 06       	cpc	r9, r17
 614:	c1 f7       	brne	.-16     	; 0x606 <lcd_putc+0xf2>
 616:	80 ec       	ldi	r24, 0xC0	; 192
 618:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 61c:	f6 01       	movw	r30, r12
 61e:	81 91       	ld	r24, Z+
 620:	6f 01       	movw	r12, r30
 622:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_dwrite>
 626:	ac 14       	cp	r10, r12
 628:	bd 04       	cpc	r11, r13
 62a:	c1 f7       	brne	.-16     	; 0x61c <lcd_putc+0x108>
 62c:	80 e9       	ldi	r24, 0x90	; 144
 62e:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 632:	f7 01       	movw	r30, r14
 634:	81 91       	ld	r24, Z+
 636:	7f 01       	movw	r14, r30
 638:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_dwrite>
 63c:	6e 14       	cp	r6, r14
 63e:	7f 04       	cpc	r7, r15
 640:	c1 f7       	brne	.-16     	; 0x632 <lcd_putc+0x11e>
 642:	80 ed       	ldi	r24, 0xD0	; 208
 644:	0e 94 22 02 	call	0x444	; 0x444 <lcd_iwrite>
 648:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <__data_end>
 64c:	84 cf       	rjmp	.-248    	; 0x556 <lcd_putc+0x42>
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <__data_end>
 654:	83 cf       	rjmp	.-250    	; 0x55c <lcd_putc+0x48>

00000656 <__divmodsi4>:
 656:	05 2e       	mov	r0, r21
 658:	97 fb       	bst	r25, 7
 65a:	1e f4       	brtc	.+6      	; 0x662 <__divmodsi4+0xc>
 65c:	00 94       	com	r0
 65e:	0e 94 42 03 	call	0x684	; 0x684 <__negsi2>
 662:	57 fd       	sbrc	r21, 7
 664:	07 d0       	rcall	.+14     	; 0x674 <__divmodsi4_neg2>
 666:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodsi4>
 66a:	07 fc       	sbrc	r0, 7
 66c:	03 d0       	rcall	.+6      	; 0x674 <__divmodsi4_neg2>
 66e:	4e f4       	brtc	.+18     	; 0x682 <__divmodsi4_exit>
 670:	0c 94 42 03 	jmp	0x684	; 0x684 <__negsi2>

00000674 <__divmodsi4_neg2>:
 674:	50 95       	com	r21
 676:	40 95       	com	r20
 678:	30 95       	com	r19
 67a:	21 95       	neg	r18
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	4f 4f       	sbci	r20, 0xFF	; 255
 680:	5f 4f       	sbci	r21, 0xFF	; 255

00000682 <__divmodsi4_exit>:
 682:	08 95       	ret

00000684 <__negsi2>:
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__udivmodsi4>:
 694:	a1 e2       	ldi	r26, 0x21	; 33
 696:	1a 2e       	mov	r1, r26
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	fd 01       	movw	r30, r26
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <__udivmodsi4_ep>

000006a0 <__udivmodsi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	ee 1f       	adc	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	a2 17       	cp	r26, r18
 6aa:	b3 07       	cpc	r27, r19
 6ac:	e4 07       	cpc	r30, r20
 6ae:	f5 07       	cpc	r31, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__udivmodsi4_ep>
 6b2:	a2 1b       	sub	r26, r18
 6b4:	b3 0b       	sbc	r27, r19
 6b6:	e4 0b       	sbc	r30, r20
 6b8:	f5 0b       	sbc	r31, r21

000006ba <__udivmodsi4_ep>:
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a 94       	dec	r1
 6c4:	69 f7       	brne	.-38     	; 0x6a0 <__udivmodsi4_loop>
 6c6:	60 95       	com	r22
 6c8:	70 95       	com	r23
 6ca:	80 95       	com	r24
 6cc:	90 95       	com	r25
 6ce:	9b 01       	movw	r18, r22
 6d0:	ac 01       	movw	r20, r24
 6d2:	bd 01       	movw	r22, r26
 6d4:	cf 01       	movw	r24, r30
 6d6:	08 95       	ret

000006d8 <_exit>:
 6d8:	f8 94       	cli

000006da <__stop_program>:
 6da:	ff cf       	rjmp	.-2      	; 0x6da <__stop_program>
