
Lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000cf0  00000d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012e  0080012e  00000db2  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007d  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000050  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000da1  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008c9  00000000  00000000  000037a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000050c  00000000  00000000  00004072  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000108  00000000  00000000  00004580  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000486  00000000  00000000  00004688  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006b0  00000000  00000000  00004b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000058  00000000  00000000  000051be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ef       	ldi	r30, 0xF0	; 240
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 32       	cpi	r26, 0x2E	; 46
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e2       	ldi	r26, 0x2E	; 46
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 33       	cpi	r26, 0x35	; 53
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  b2:	0c 94 76 06 	jmp	0xcec	; 0xcec <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <getkey>:
			}
		}
		
    }
}
signed char getkey() {
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b0 e0       	ldi	r27, 0x00	; 0
	
	int key = -1;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	9f ef       	ldi	r25, 0xFF	; 255
	int col = 0;
	int maskRow = 0b00010000;
	int maskCol = 0b00000001;
	
	for(i = 4; i < 8; i++) {
		DDRA = maskRow << (i -4);
  ce:	00 e1       	ldi	r16, 0x10	; 16
  d0:	10 e0       	ldi	r17, 0x00	; 0
		PORTA = maskRow << (i - 4);
		row = (i - 4);
		
		for(j = 0; j < 4; j++) {
			if((PINA & (maskCol << j)) == (maskCol << j)) {
  d2:	e1 e0       	ldi	r30, 0x01	; 1
  d4:	f0 e0       	ldi	r31, 0x00	; 0
	int col = 0;
	int maskRow = 0b00010000;
	int maskCol = 0b00000001;
	
	for(i = 4; i < 8; i++) {
		DDRA = maskRow << (i -4);
  d6:	98 01       	movw	r18, r16
  d8:	0a 2e       	mov	r0, r26
  da:	02 c0       	rjmp	.+4      	; 0xe0 <getkey+0x26>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <getkey+0x22>
  e4:	21 b9       	out	0x01, r18	; 1
		PORTA = maskRow << (i - 4);
  e6:	22 b9       	out	0x02, r18	; 2
		row = (i - 4);
		
		for(j = 0; j < 4; j++) {
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
			if((PINA & (maskCol << j)) == (maskCol << j)) {
  ec:	20 b1       	in	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	af 01       	movw	r20, r30
  f2:	06 2e       	mov	r0, r22
  f4:	02 c0       	rjmp	.+4      	; 0xfa <getkey+0x40>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <getkey+0x3c>
  fe:	24 23       	and	r18, r20
 100:	35 23       	and	r19, r21
 102:	42 17       	cp	r20, r18
 104:	53 07       	cpc	r21, r19
 106:	19 f4       	brne	.+6      	; 0x10e <getkey+0x54>
 108:	cb 01       	movw	r24, r22
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
	for(i = 4; i < 8; i++) {
		DDRA = maskRow << (i -4);
		PORTA = maskRow << (i - 4);
		row = (i - 4);
		
		for(j = 0; j < 4; j++) {
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	64 30       	cpi	r22, 0x04	; 4
 114:	71 05       	cpc	r23, r1
 116:	51 f7       	brne	.-44     	; 0xec <getkey+0x32>
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	24 96       	adiw	r28, 0x04	; 4
	int row = 0;
	int col = 0;
	int maskRow = 0b00010000;
	int maskCol = 0b00000001;
	
	for(i = 4; i < 8; i++) {
 11c:	a4 30       	cpi	r26, 0x04	; 4
 11e:	b1 05       	cpc	r27, r1
 120:	d1 f6       	brne	.-76     	; 0xd6 <getkey+0x1c>
				key = 4 * row + col;
			}
		}
	}
	return key;
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <mapkey>:
signed char mapkey(signed char key) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	60 97       	sbiw	r28, 0x10	; 16
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
	
	if((key < 0) || (key > 15)) {
 140:	80 31       	cpi	r24, 0x10	; 16
 142:	98 f4       	brcc	.+38     	; 0x16a <mapkey+0x3e>
		return key = -1;
	}
	
	signed char numkey[16] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
 144:	90 e1       	ldi	r25, 0x10	; 16
 146:	ee e0       	ldi	r30, 0x0E	; 14
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	de 01       	movw	r26, r28
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	01 90       	ld	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	9a 95       	dec	r25
 154:	e1 f7       	brne	.-8      	; 0x14e <mapkey+0x22>
	
	key = numkey[key];
 156:	e1 e0       	ldi	r30, 0x01	; 1
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ec 0f       	add	r30, r28
 15c:	fd 1f       	adc	r31, r29
 15e:	e8 0f       	add	r30, r24
 160:	f1 1d       	adc	r31, r1
 162:	87 fd       	sbrc	r24, 7
 164:	fa 95       	dec	r31
 166:	80 81       	ld	r24, Z
	
	return key;
 168:	01 c0       	rjmp	.+2      	; 0x16c <mapkey+0x40>
	return key;
}
signed char mapkey(signed char key) {
	
	if((key < 0) || (key > 15)) {
		return key = -1;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
	signed char numkey[16] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
	
	key = numkey[key];
	
	return key;
}
 16c:	60 96       	adiw	r28, 0x10	; 16
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <getpw>:
char getpw(char maxsize, char *pw) {
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	7b 01       	movw	r14, r22
	
	char *element = pw;
 198:	8b 01       	movw	r16, r22
		
		while(getkey() != -1);
		while(getkey() == -1);
		
		
		if(element-pw < maxsize) {
 19a:	86 2e       	mov	r8, r22
 19c:	9f 2c       	mov	r9, r15
 19e:	c8 2e       	mov	r12, r24
 1a0:	d1 2c       	mov	r13, r1
	char *element = pw;
	int i;
	
	while(1) {
		
		while(getkey() != -1);
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1a6:	8f 3f       	cpi	r24, 0xFF	; 255
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <getpw+0x24>
		while(getkey() == -1);
 1aa:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1ae:	8f 3f       	cpi	r24, 0xFF	; 255
 1b0:	e1 f3       	breq	.-8      	; 0x1aa <getpw+0x2c>
		
		
		if(element-pw < maxsize) {
 1b2:	c8 2d       	mov	r28, r8
 1b4:	d9 2d       	mov	r29, r9
 1b6:	c8 01       	movw	r24, r16
 1b8:	8e 19       	sub	r24, r14
 1ba:	9f 09       	sbc	r25, r15
 1bc:	8c 15       	cp	r24, r12
 1be:	9d 05       	cpc	r25, r13
 1c0:	6c f4       	brge	.+26     	; 0x1dc <getpw+0x5e>
			if(mapkey(getkey()) <= 13) {
 1c2:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1c6:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1ca:	8e 30       	cpi	r24, 0x0E	; 14
 1cc:	3c f4       	brge	.+14     	; 0x1dc <getpw+0x5e>
				*element = mapkey(getkey());
 1ce:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1d2:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1d6:	f8 01       	movw	r30, r16
 1d8:	81 93       	st	Z+, r24
 1da:	8f 01       	movw	r16, r30
				element++;
			}
		}
		
		if((mapkey(getkey()) == '*') && (element-pw > 0)) {
 1dc:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1e0:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1e4:	8a 32       	cpi	r24, 0x2A	; 42
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <getpw+0x7a>
 1e8:	c8 01       	movw	r24, r16
 1ea:	8e 19       	sub	r24, r14
 1ec:	9f 09       	sbc	r25, r15
 1ee:	18 16       	cp	r1, r24
 1f0:	19 06       	cpc	r1, r25
 1f2:	04 f5       	brge	.+64     	; 0x234 <getpw+0xb6>
			element--;
 1f4:	01 50       	subi	r16, 0x01	; 1
 1f6:	11 09       	sbc	r17, r1
		}
		
		if(mapkey(getkey()) == '#') {
 1f8:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1fc:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 200:	83 32       	cpi	r24, 0x23	; 35
 202:	f1 f0       	breq	.+60     	; 0x240 <getpw+0xc2>
			return (element-pw);
		}
		lcd_iwrite(LCD_CLR);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
		for(i = 0; i < (element-pw); i++) {
 20a:	58 01       	movw	r10, r16
 20c:	ae 18       	sub	r10, r14
 20e:	bf 08       	sbc	r11, r15
 210:	1a 14       	cp	r1, r10
 212:	1b 04       	cpc	r1, r11
 214:	34 f6       	brge	.-116    	; 0x1a2 <getpw+0x24>
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	d0 e0       	ldi	r29, 0x00	; 0
			printf("*");
 21a:	8a e2       	ldi	r24, 0x2A	; 42
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 a7 03 	call	0x74e	; 0x74e <putchar>
		
		if(mapkey(getkey()) == '#') {
			return (element-pw);
		}
		lcd_iwrite(LCD_CLR);
		for(i = 0; i < (element-pw); i++) {
 222:	21 96       	adiw	r28, 0x01	; 1
 224:	ca 15       	cp	r28, r10
 226:	db 05       	cpc	r29, r11
 228:	c1 f7       	brne	.-16     	; 0x21a <getpw+0x9c>
 22a:	bb cf       	rjmp	.-138    	; 0x1a2 <getpw+0x24>
		}
		
		if(mapkey(getkey()) == '#') {
			return (element-pw);
		}
		lcd_iwrite(LCD_CLR);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 232:	b7 cf       	rjmp	.-146    	; 0x1a2 <getpw+0x24>
		
		if((mapkey(getkey()) == '*') && (element-pw > 0)) {
			element--;
		}
		
		if(mapkey(getkey()) == '#') {
 234:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 238:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 23c:	83 32       	cpi	r24, 0x23	; 35
 23e:	b1 f7       	brne	.-20     	; 0x22c <getpw+0xae>
			return (element-pw);
 240:	c8 01       	movw	r24, r16
 242:	8c 1b       	sub	r24, r28
 244:	9d 0b       	sbc	r25, r29
		lcd_iwrite(LCD_CLR);
		for(i = 0; i < (element-pw); i++) {
			printf("*");
		}
	}
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	8f 90       	pop	r8
 25e:	08 95       	ret

00000260 <compareArrays>:
char compareArrays(char SIZE, const char *px, const char *py) {
	
	char *checkX = 0;
	char *checkY = 0;
	
	for(checkX = px, checkY = py; checkX-px < SIZE; checkX++, checkY++) {
 260:	88 23       	and	r24, r24
 262:	b1 f0       	breq	.+44     	; 0x290 <compareArrays+0x30>
		
		if(*checkX != *checkY) {
 264:	fb 01       	movw	r30, r22
 266:	20 81       	ld	r18, Z
 268:	fa 01       	movw	r30, r20
 26a:	90 81       	ld	r25, Z
 26c:	29 13       	cpse	r18, r25
 26e:	12 c0       	rjmp	.+36     	; 0x294 <compareArrays+0x34>
 270:	fb 01       	movw	r30, r22
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	da 01       	movw	r26, r20
 276:	11 96       	adiw	r26, 0x01	; 1
 278:	68 0f       	add	r22, r24
 27a:	71 1d       	adc	r23, r1
 27c:	04 c0       	rjmp	.+8      	; 0x286 <compareArrays+0x26>
 27e:	91 91       	ld	r25, Z+
 280:	8d 91       	ld	r24, X+
 282:	98 13       	cpse	r25, r24
 284:	09 c0       	rjmp	.+18     	; 0x298 <compareArrays+0x38>
char compareArrays(char SIZE, const char *px, const char *py) {
	
	char *checkX = 0;
	char *checkY = 0;
	
	for(checkX = px, checkY = py; checkX-px < SIZE; checkX++, checkY++) {
 286:	e6 17       	cp	r30, r22
 288:	f7 07       	cpc	r31, r23
 28a:	c9 f7       	brne	.-14     	; 0x27e <compareArrays+0x1e>
		
		if(*checkX != *checkY) {
			return 0;
		}
	}
	return 1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	08 95       	ret
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
	char *checkY = 0;
	
	for(checkX = px, checkY = py; checkX-px < SIZE; checkX++, checkY++) {
		
		if(*checkX != *checkY) {
			return 0;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
 29a:	08 95       	ret

0000029c <delaycycles>:
		delaycycles(1000);
	}
}

void delaycycles(unsigned int cycles) {
	TCNT1 = -(cycles - MAGIC);
 29c:	2e e1       	ldi	r18, 0x1E	; 30
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	28 1b       	sub	r18, r24
 2a2:	39 0b       	sbc	r19, r25
 2a4:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a8:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIFR1 = (1 << TOV1);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	86 bb       	out	0x16, r24	; 22
	while((TIFR1 & (1 << TOV1)) != (1 << TOV1));
 2b0:	b0 9b       	sbis	0x16, 0	; 22
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <delaycycles+0x14>
}
 2b4:	08 95       	ret

000002b6 <mydelayms>:
			return 0;
		}
	}
	return 1;
}
void mydelayms(unsigned int ms) {
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
	for(int i = 0; i < ms; i++) {
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	59 f0       	breq	.+22     	; 0x2d8 <mydelayms+0x22>
 2c2:	8c 01       	movw	r16, r24
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
		delaycycles(1000);
 2c8:	88 ee       	ldi	r24, 0xE8	; 232
 2ca:	93 e0       	ldi	r25, 0x03	; 3
 2cc:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
		}
	}
	return 1;
}
void mydelayms(unsigned int ms) {
	for(int i = 0; i < ms; i++) {
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	c0 17       	cp	r28, r16
 2d4:	d1 07       	cpc	r29, r17
 2d6:	c1 f7       	brne	.-16     	; 0x2c8 <mydelayms+0x12>
		delaycycles(1000);
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <main>:
void delaycycles(unsigned int cycles);
void mydelayms(unsigned int ms);



int main(void) {
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	64 97       	sbiw	r28, 0x14	; 20
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
	char passwd[] = {1,1,1,1};			// Hardcode the password here
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	89 83       	std	Y+1, r24	; 0x01
 2fa:	8a 83       	std	Y+2, r24	; 0x02
 2fc:	8b 83       	std	Y+3, r24	; 0x03
 2fe:	8c 83       	std	Y+4, r24	; 0x04
	//	DDRA = 0xF0; // While running the lower 4 bits of PORTA will be inputs and the
	// upper 4 bits will be outputs, but we'll make them outputs one at
	// a time, so we'll actually control the data direction in getkey(),
	// the keypad scanning routine.
	
	TCCR1B  = 0x01;		// Enable Timer 1 to count normally using the internal clock
 300:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	DDRD |= 0x01;
 304:	50 9a       	sbi	0x0a, 0	; 10

	lcd_init();		// Init the LCD display
 306:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_init>
	stdout=&lcd_stdout;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <__iob+0x3>
 312:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__iob+0x2>
			//for(int w = 0; w < 20000; w++) {
				//delaycycles(50);
			//}
		//}
		
		lcd_iwrite(LCD_CLR);
 316:	ff 24       	eor	r15, r15
 318:	f3 94       	inc	r15
				}
			}
		}
		else {
			for(k = 0; k < 4; k++) {
				printf("Error");
 31a:	0f 2e       	mov	r0, r31
 31c:	f8 e2       	ldi	r31, 0x28	; 40
 31e:	cf 2e       	mov	r12, r31
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	df 2e       	mov	r13, r31
 324:	f0 2d       	mov	r31, r0
				for(int s = 0; s < 56; s++) {
					PORTD = 1;
 326:	ef 2c       	mov	r14, r15
		lcd_iwrite(LCD_CLR);
		usersize = getpw(BUFFSIZE, pwbuff);
		lcd_iwrite(LCD_CLR);
		if(usersize == pwsize) {
			if (compareArrays(pwsize, passwd, pwbuff) == 1) {
				printf("Open Lock");
 328:	0f 2e       	mov	r0, r31
 32a:	fe e1       	ldi	r31, 0x1E	; 30
 32c:	8f 2e       	mov	r8, r31
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	9f 2e       	mov	r9, r31
 332:	f0 2d       	mov	r31, r0
			//for(int w = 0; w < 20000; w++) {
				//delaycycles(50);
			//}
		//}
		
		lcd_iwrite(LCD_CLR);
 334:	8f 2d       	mov	r24, r15
 336:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
		usersize = getpw(BUFFSIZE, pwbuff);
 33a:	be 01       	movw	r22, r28
 33c:	6b 5f       	subi	r22, 0xFB	; 251
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	80 e1       	ldi	r24, 0x10	; 16
 342:	0e 94 bf 00 	call	0x17e	; 0x17e <getpw>
 346:	18 2f       	mov	r17, r24
		lcd_iwrite(LCD_CLR);
 348:	8f 2d       	mov	r24, r15
 34a:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
		if(usersize == pwsize) {
 34e:	14 30       	cpi	r17, 0x04	; 4
 350:	09 f0       	breq	.+2      	; 0x354 <main+0x72>
 352:	49 c0       	rjmp	.+146    	; 0x3e6 <main+0x104>
			if (compareArrays(pwsize, passwd, pwbuff) == 1) {
 354:	ae 01       	movw	r20, r28
 356:	4b 5f       	subi	r20, 0xFB	; 251
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	0e 94 30 01 	call	0x260	; 0x260 <compareArrays>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	c9 f4       	brne	.+50     	; 0x39c <main+0xba>
				printf("Open Lock");
 36a:	9f 92       	push	r9
 36c:	8f 92       	push	r8
 36e:	0e 94 91 03 	call	0x722	; 0x722 <printf>
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	00 e7       	ldi	r16, 0x70	; 112
 378:	13 e0       	ldi	r17, 0x03	; 3
				for(int s = 0; s < 880; s++) {
					PORTD = 1;
 37a:	fb b8       	out	0x0b, r15	; 11
					delaycycles(1136);
 37c:	80 e7       	ldi	r24, 0x70	; 112
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
					PORTD = 0;
 384:	1b b8       	out	0x0b, r1	; 11
					delaycycles(1136);
 386:	80 e7       	ldi	r24, 0x70	; 112
 388:	94 e0       	ldi	r25, 0x04	; 4
 38a:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
 38e:	01 50       	subi	r16, 0x01	; 1
 390:	11 09       	sbc	r17, r1
		usersize = getpw(BUFFSIZE, pwbuff);
		lcd_iwrite(LCD_CLR);
		if(usersize == pwsize) {
			if (compareArrays(pwsize, passwd, pwbuff) == 1) {
				printf("Open Lock");
				for(int s = 0; s < 880; s++) {
 392:	99 f7       	brne	.-26     	; 0x37a <main+0x98>
					delaycycles(1136);
					PORTD = 0;
					delaycycles(1136);
					
				}
				lcd_iwrite(LCD_CLR);
 394:	8f 2d       	mov	r24, r15
 396:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 39a:	cc cf       	rjmp	.-104    	; 0x334 <main+0x52>
 39c:	68 94       	set
 39e:	aa 24       	eor	r10, r10
 3a0:	a2 f8       	bld	r10, 2
 3a2:	b1 2c       	mov	r11, r1
			}
			else {
				for(k = 0; k < 4; k++) {
					printf("Error");
 3a4:	df 92       	push	r13
 3a6:	cf 92       	push	r12
 3a8:	0e 94 91 03 	call	0x722	; 0x722 <printf>
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	08 e3       	ldi	r16, 0x38	; 56
 3b2:	10 e0       	ldi	r17, 0x00	; 0
					for(int s = 0; s < 56; s++) {
						PORTD = 1;
 3b4:	fb b8       	out	0x0b, r15	; 11
						delaycycles(2203);
 3b6:	8b e9       	ldi	r24, 0x9B	; 155
 3b8:	98 e0       	ldi	r25, 0x08	; 8
 3ba:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
						PORTD = 0;
 3be:	1b b8       	out	0x0b, r1	; 11
						delaycycles(2203);
 3c0:	8b e9       	ldi	r24, 0x9B	; 155
 3c2:	98 e0       	ldi	r25, 0x08	; 8
 3c4:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
 3c8:	01 50       	subi	r16, 0x01	; 1
 3ca:	11 09       	sbc	r17, r1
				lcd_iwrite(LCD_CLR);
			}
			else {
				for(k = 0; k < 4; k++) {
					printf("Error");
					for(int s = 0; s < 56; s++) {
 3cc:	99 f7       	brne	.-26     	; 0x3b4 <main+0xd2>
						delaycycles(2203);
						PORTD = 0;
						delaycycles(2203);
						
					}
					lcd_iwrite(LCD_CLR);
 3ce:	8e 2d       	mov	r24, r14
 3d0:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
					mydelayms(250);
 3d4:	8a ef       	ldi	r24, 0xFA	; 250
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <mydelayms>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	a8 1a       	sub	r10, r24
 3e0:	b1 08       	sbc	r11, r1
					
				}
				lcd_iwrite(LCD_CLR);
			}
			else {
				for(k = 0; k < 4; k++) {
 3e2:	01 f7       	brne	.-64     	; 0x3a4 <main+0xc2>
 3e4:	a7 cf       	rjmp	.-178    	; 0x334 <main+0x52>
 3e6:	68 94       	set
 3e8:	aa 24       	eor	r10, r10
 3ea:	a2 f8       	bld	r10, 2
 3ec:	b1 2c       	mov	r11, r1
				}
			}
		}
		else {
			for(k = 0; k < 4; k++) {
				printf("Error");
 3ee:	df 92       	push	r13
 3f0:	cf 92       	push	r12
 3f2:	0e 94 91 03 	call	0x722	; 0x722 <printf>
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	08 e3       	ldi	r16, 0x38	; 56
 3fc:	10 e0       	ldi	r17, 0x00	; 0
				for(int s = 0; s < 56; s++) {
					PORTD = 1;
 3fe:	fb b8       	out	0x0b, r15	; 11
					delaycycles(2203);
 400:	8b e9       	ldi	r24, 0x9B	; 155
 402:	98 e0       	ldi	r25, 0x08	; 8
 404:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
					PORTD = 0;
 408:	1b b8       	out	0x0b, r1	; 11
					delaycycles(2203);
 40a:	8b e9       	ldi	r24, 0x9B	; 155
 40c:	98 e0       	ldi	r25, 0x08	; 8
 40e:	0e 94 4e 01 	call	0x29c	; 0x29c <delaycycles>
 412:	01 50       	subi	r16, 0x01	; 1
 414:	11 09       	sbc	r17, r1
			}
		}
		else {
			for(k = 0; k < 4; k++) {
				printf("Error");
				for(int s = 0; s < 56; s++) {
 416:	99 f7       	brne	.-26     	; 0x3fe <main+0x11c>
					delaycycles(2203);
					PORTD = 0;
					delaycycles(2203);
					
				}
				lcd_iwrite(LCD_CLR);
 418:	8e 2d       	mov	r24, r14
 41a:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
				mydelayms(250);
 41e:	8a ef       	ldi	r24, 0xFA	; 250
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <mydelayms>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	a8 1a       	sub	r10, r24
 42a:	b1 08       	sbc	r11, r1
					mydelayms(250);
				}
			}
		}
		else {
			for(k = 0; k < 4; k++) {
 42c:	01 f7       	brne	.-64     	; 0x3ee <main+0x10c>
 42e:	82 cf       	rjmp	.-252    	; 0x334 <main+0x52>

00000430 <lcd_clk>:
 430:	47 9a       	sbi	0x08, 7	; 8
 432:	85 e0       	ldi	r24, 0x05	; 5
 434:	8a 95       	dec	r24
 436:	f1 f7       	brne	.-4      	; 0x434 <lcd_clk+0x4>
 438:	00 00       	nop
 43a:	47 98       	cbi	0x08, 7	; 8
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	8a 95       	dec	r24
 440:	f1 f7       	brne	.-4      	; 0x43e <lcd_clk+0xe>
 442:	00 00       	nop
 444:	08 95       	ret

00000446 <lcd_busy_wait>:
 446:	84 b1       	in	r24, 0x04	; 4
 448:	80 7f       	andi	r24, 0xF0	; 240
 44a:	84 b9       	out	0x04, r24	; 4
 44c:	95 b1       	in	r25, 0x05	; 5
 44e:	29 2f       	mov	r18, r25
 450:	20 71       	andi	r18, 0x10	; 16
 452:	2c 98       	cbi	0x05, 4	; 5
 454:	46 9a       	sbi	0x08, 6	; 8
 456:	47 9a       	sbi	0x08, 7	; 8
 458:	85 e0       	ldi	r24, 0x05	; 5
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_busy_wait+0x14>
 45e:	00 00       	nop
 460:	93 b1       	in	r25, 0x03	; 3
 462:	47 98       	cbi	0x08, 7	; 8
 464:	85 e0       	ldi	r24, 0x05	; 5
 466:	8a 95       	dec	r24
 468:	f1 f7       	brne	.-4      	; 0x466 <lcd_busy_wait+0x20>
 46a:	00 00       	nop
 46c:	47 9a       	sbi	0x08, 7	; 8
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	8a 95       	dec	r24
 472:	f1 f7       	brne	.-4      	; 0x470 <lcd_busy_wait+0x2a>
 474:	00 00       	nop
 476:	83 b1       	in	r24, 0x03	; 3
 478:	92 95       	swap	r25
 47a:	90 7f       	andi	r25, 0xF0	; 240
 47c:	8f 70       	andi	r24, 0x0F	; 15
 47e:	89 2b       	or	r24, r25
 480:	47 98       	cbi	0x08, 7	; 8
 482:	95 e0       	ldi	r25, 0x05	; 5
 484:	9a 95       	dec	r25
 486:	f1 f7       	brne	.-4      	; 0x484 <lcd_busy_wait+0x3e>
 488:	00 00       	nop
 48a:	87 fd       	sbrc	r24, 7
 48c:	e4 cf       	rjmp	.-56     	; 0x456 <lcd_busy_wait+0x10>
 48e:	46 98       	cbi	0x08, 6	; 8
 490:	95 b1       	in	r25, 0x05	; 5
 492:	9f 7e       	andi	r25, 0xEF	; 239
 494:	92 2b       	or	r25, r18
 496:	95 b9       	out	0x05, r25	; 5
 498:	94 b1       	in	r25, 0x04	; 4
 49a:	9f 60       	ori	r25, 0x0F	; 15
 49c:	94 b9       	out	0x04, r25	; 4
 49e:	08 95       	ret

000004a0 <lcd_dread>:
 4a0:	0e 94 23 02 	call	0x446	; 0x446 <lcd_busy_wait>
 4a4:	84 b1       	in	r24, 0x04	; 4
 4a6:	80 7f       	andi	r24, 0xF0	; 240
 4a8:	84 b9       	out	0x04, r24	; 4
 4aa:	46 9a       	sbi	0x08, 6	; 8
 4ac:	47 9a       	sbi	0x08, 7	; 8
 4ae:	85 e0       	ldi	r24, 0x05	; 5
 4b0:	8a 95       	dec	r24
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcd_dread+0x10>
 4b4:	00 00       	nop
 4b6:	23 b1       	in	r18, 0x03	; 3
 4b8:	47 98       	cbi	0x08, 7	; 8
 4ba:	85 e0       	ldi	r24, 0x05	; 5
 4bc:	8a 95       	dec	r24
 4be:	f1 f7       	brne	.-4      	; 0x4bc <lcd_dread+0x1c>
 4c0:	00 00       	nop
 4c2:	47 9a       	sbi	0x08, 7	; 8
 4c4:	85 e0       	ldi	r24, 0x05	; 5
 4c6:	8a 95       	dec	r24
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <lcd_dread+0x26>
 4ca:	00 00       	nop
 4cc:	93 b1       	in	r25, 0x03	; 3
 4ce:	22 95       	swap	r18
 4d0:	20 7f       	andi	r18, 0xF0	; 240
 4d2:	89 2f       	mov	r24, r25
 4d4:	8f 70       	andi	r24, 0x0F	; 15
 4d6:	47 98       	cbi	0x08, 7	; 8
 4d8:	46 98       	cbi	0x08, 6	; 8
 4da:	94 b1       	in	r25, 0x04	; 4
 4dc:	9f 60       	ori	r25, 0x0F	; 15
 4de:	94 b9       	out	0x04, r25	; 4
 4e0:	82 2b       	or	r24, r18
 4e2:	08 95       	ret

000004e4 <lcd_dwrite>:
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
 4e8:	0e 94 23 02 	call	0x446	; 0x446 <lcd_busy_wait>
 4ec:	95 b1       	in	r25, 0x05	; 5
 4ee:	8c 2f       	mov	r24, r28
 4f0:	82 95       	swap	r24
 4f2:	8f 70       	andi	r24, 0x0F	; 15
 4f4:	90 7f       	andi	r25, 0xF0	; 240
 4f6:	98 2b       	or	r25, r24
 4f8:	95 b9       	out	0x05, r25	; 5
 4fa:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 4fe:	95 b1       	in	r25, 0x05	; 5
 500:	8c 2f       	mov	r24, r28
 502:	8f 70       	andi	r24, 0x0F	; 15
 504:	90 7f       	andi	r25, 0xF0	; 240
 506:	89 2b       	or	r24, r25
 508:	85 b9       	out	0x05, r24	; 5
 50a:	cf 91       	pop	r28
 50c:	0c 94 18 02 	jmp	0x430	; 0x430 <lcd_clk>

00000510 <lcd_iwrite>:
 510:	cf 93       	push	r28
 512:	c8 2f       	mov	r28, r24
 514:	2c 98       	cbi	0x05, 4	; 5
 516:	0e 94 23 02 	call	0x446	; 0x446 <lcd_busy_wait>
 51a:	95 b1       	in	r25, 0x05	; 5
 51c:	8c 2f       	mov	r24, r28
 51e:	82 95       	swap	r24
 520:	8f 70       	andi	r24, 0x0F	; 15
 522:	90 7f       	andi	r25, 0xF0	; 240
 524:	98 2b       	or	r25, r24
 526:	95 b9       	out	0x05, r25	; 5
 528:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 52c:	95 b1       	in	r25, 0x05	; 5
 52e:	8c 2f       	mov	r24, r28
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	90 7f       	andi	r25, 0xF0	; 240
 534:	89 2b       	or	r24, r25
 536:	85 b9       	out	0x05, r24	; 5
 538:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 53c:	2c 9a       	sbi	0x05, 4	; 5
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <lcd_init>:
 542:	85 b1       	in	r24, 0x05	; 5
 544:	80 7e       	andi	r24, 0xE0	; 224
 546:	85 b9       	out	0x05, r24	; 5
 548:	2c 98       	cbi	0x05, 4	; 5
 54a:	46 98       	cbi	0x08, 6	; 8
 54c:	47 98       	cbi	0x08, 7	; 8
 54e:	84 b1       	in	r24, 0x04	; 4
 550:	8f 61       	ori	r24, 0x1F	; 31
 552:	84 b9       	out	0x04, r24	; 4
 554:	87 b1       	in	r24, 0x07	; 7
 556:	80 6c       	ori	r24, 0xC0	; 192
 558:	87 b9       	out	0x07, r24	; 7
 55a:	8f e5       	ldi	r24, 0x5F	; 95
 55c:	9a ee       	ldi	r25, 0xEA	; 234
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <lcd_init+0x1c>
 562:	00 c0       	rjmp	.+0      	; 0x564 <lcd_init+0x22>
 564:	00 00       	nop
 566:	85 b1       	in	r24, 0x05	; 5
 568:	80 7f       	andi	r24, 0xF0	; 240
 56a:	83 60       	ori	r24, 0x03	; 3
 56c:	85 b9       	out	0x05, r24	; 5
 56e:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 572:	87 e0       	ldi	r24, 0x07	; 7
 574:	90 e2       	ldi	r25, 0x20	; 32
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <lcd_init+0x34>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <lcd_init+0x3a>
 57c:	00 00       	nop
 57e:	85 b1       	in	r24, 0x05	; 5
 580:	80 7f       	andi	r24, 0xF0	; 240
 582:	83 60       	ori	r24, 0x03	; 3
 584:	85 b9       	out	0x05, r24	; 5
 586:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 58a:	87 ec       	ldi	r24, 0xC7	; 199
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <lcd_init+0x4c>
 592:	00 c0       	rjmp	.+0      	; 0x594 <lcd_init+0x52>
 594:	00 00       	nop
 596:	85 b1       	in	r24, 0x05	; 5
 598:	80 7f       	andi	r24, 0xF0	; 240
 59a:	83 60       	ori	r24, 0x03	; 3
 59c:	85 b9       	out	0x05, r24	; 5
 59e:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 5a2:	0e 94 23 02 	call	0x446	; 0x446 <lcd_busy_wait>
 5a6:	85 b1       	in	r24, 0x05	; 5
 5a8:	80 7f       	andi	r24, 0xF0	; 240
 5aa:	82 60       	ori	r24, 0x02	; 2
 5ac:	85 b9       	out	0x05, r24	; 5
 5ae:	0e 94 18 02 	call	0x430	; 0x430 <lcd_clk>
 5b2:	84 e2       	ldi	r24, 0x24	; 36
 5b4:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5b8:	8c e2       	ldi	r24, 0x2C	; 44
 5ba:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5be:	88 e0       	ldi	r24, 0x08	; 8
 5c0:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5d0:	8f e0       	ldi	r24, 0x0F	; 15
 5d2:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5d6:	80 ed       	ldi	r24, 0xD0	; 208
 5d8:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 5dc:	2c 9a       	sbi	0x05, 4	; 5
 5de:	08 95       	ret

000005e0 <lcd_putc>:
 5e0:	3f 92       	push	r3
 5e2:	4f 92       	push	r4
 5e4:	5f 92       	push	r5
 5e6:	6f 92       	push	r6
 5e8:	7f 92       	push	r7
 5ea:	8f 92       	push	r8
 5ec:	9f 92       	push	r9
 5ee:	af 92       	push	r10
 5f0:	bf 92       	push	r11
 5f2:	cf 92       	push	r12
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	e0 97       	sbiw	r28, 0x30	; 48
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	8a 30       	cpi	r24, 0x0A	; 10
 614:	09 f4       	brne	.+2      	; 0x618 <lcd_putc+0x38>
 616:	81 c0       	rjmp	.+258    	; 0x71a <lcd_putc+0x13a>
 618:	38 2e       	mov	r3, r24
 61a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 61e:	81 11       	cpse	r24, r1
 620:	1d c0       	rjmp	.+58     	; 0x65c <lcd_putc+0x7c>
 622:	83 2d       	mov	r24, r3
 624:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_dwrite>
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	e0 96       	adiw	r28, 0x30	; 48
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	ff 90       	pop	r15
 642:	ef 90       	pop	r14
 644:	df 90       	pop	r13
 646:	cf 90       	pop	r12
 648:	bf 90       	pop	r11
 64a:	af 90       	pop	r10
 64c:	9f 90       	pop	r9
 64e:	8f 90       	pop	r8
 650:	7f 90       	pop	r7
 652:	6f 90       	pop	r6
 654:	5f 90       	pop	r5
 656:	4f 90       	pop	r4
 658:	3f 90       	pop	r3
 65a:	08 95       	ret
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 662:	8e 01       	movw	r16, r28
 664:	0f 5f       	subi	r16, 0xFF	; 255
 666:	1f 4f       	sbci	r17, 0xFF	; 255
 668:	4e 01       	movw	r8, r28
 66a:	81 e1       	ldi	r24, 0x11	; 17
 66c:	88 0e       	add	r8, r24
 66e:	91 1c       	adc	r9, r1
 670:	78 01       	movw	r14, r16
 672:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_dread>
 676:	f7 01       	movw	r30, r14
 678:	81 93       	st	Z+, r24
 67a:	7f 01       	movw	r14, r30
 67c:	e8 15       	cp	r30, r8
 67e:	f9 05       	cpc	r31, r9
 680:	c1 f7       	brne	.-16     	; 0x672 <lcd_putc+0x92>
 682:	80 e9       	ldi	r24, 0x90	; 144
 684:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 688:	64 01       	movw	r12, r8
 68a:	5e 01       	movw	r10, r28
 68c:	f1 e2       	ldi	r31, 0x21	; 33
 68e:	af 0e       	add	r10, r31
 690:	b1 1c       	adc	r11, r1
 692:	74 01       	movw	r14, r8
 694:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_dread>
 698:	f7 01       	movw	r30, r14
 69a:	81 93       	st	Z+, r24
 69c:	7f 01       	movw	r14, r30
 69e:	ea 15       	cp	r30, r10
 6a0:	fb 05       	cpc	r31, r11
 6a2:	c1 f7       	brne	.-16     	; 0x694 <lcd_putc+0xb4>
 6a4:	80 ed       	ldi	r24, 0xD0	; 208
 6a6:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 6aa:	75 01       	movw	r14, r10
 6ac:	3e 01       	movw	r6, r28
 6ae:	f1 e3       	ldi	r31, 0x31	; 49
 6b0:	6f 0e       	add	r6, r31
 6b2:	71 1c       	adc	r7, r1
 6b4:	25 01       	movw	r4, r10
 6b6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_dread>
 6ba:	f2 01       	movw	r30, r4
 6bc:	81 93       	st	Z+, r24
 6be:	2f 01       	movw	r4, r30
 6c0:	e6 15       	cp	r30, r6
 6c2:	f7 05       	cpc	r31, r7
 6c4:	c1 f7       	brne	.-16     	; 0x6b6 <lcd_putc+0xd6>
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 6d2:	f8 01       	movw	r30, r16
 6d4:	81 91       	ld	r24, Z+
 6d6:	8f 01       	movw	r16, r30
 6d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_dwrite>
 6dc:	80 16       	cp	r8, r16
 6de:	91 06       	cpc	r9, r17
 6e0:	c1 f7       	brne	.-16     	; 0x6d2 <lcd_putc+0xf2>
 6e2:	80 ec       	ldi	r24, 0xC0	; 192
 6e4:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 6e8:	f6 01       	movw	r30, r12
 6ea:	81 91       	ld	r24, Z+
 6ec:	6f 01       	movw	r12, r30
 6ee:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_dwrite>
 6f2:	ac 14       	cp	r10, r12
 6f4:	bd 04       	cpc	r11, r13
 6f6:	c1 f7       	brne	.-16     	; 0x6e8 <lcd_putc+0x108>
 6f8:	80 e9       	ldi	r24, 0x90	; 144
 6fa:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 6fe:	f7 01       	movw	r30, r14
 700:	81 91       	ld	r24, Z+
 702:	7f 01       	movw	r14, r30
 704:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_dwrite>
 708:	6e 14       	cp	r6, r14
 70a:	7f 04       	cpc	r7, r15
 70c:	c1 f7       	brne	.-16     	; 0x6fe <lcd_putc+0x11e>
 70e:	80 ed       	ldi	r24, 0xD0	; 208
 710:	0e 94 88 02 	call	0x510	; 0x510 <lcd_iwrite>
 714:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
 718:	84 cf       	rjmp	.-248    	; 0x622 <lcd_putc+0x42>
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 720:	83 cf       	rjmp	.-250    	; 0x628 <lcd_putc+0x48>

00000722 <printf>:
 722:	a0 e0       	ldi	r26, 0x00	; 0
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e7 e9       	ldi	r30, 0x97	; 151
 728:	f3 e0       	ldi	r31, 0x03	; 3
 72a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__prologue_saves__+0x20>
 72e:	ae 01       	movw	r20, r28
 730:	4b 5f       	subi	r20, 0xFB	; 251
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	fa 01       	movw	r30, r20
 736:	61 91       	ld	r22, Z+
 738:	71 91       	ld	r23, Z+
 73a:	af 01       	movw	r20, r30
 73c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__iob+0x2>
 740:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__iob+0x3>
 744:	0e 94 ae 03 	call	0x75c	; 0x75c <vfprintf>
 748:	e2 e0       	ldi	r30, 0x02	; 2
 74a:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__epilogue_restores__+0x20>

0000074e <putchar>:
 74e:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <__iob+0x2>
 752:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <__iob+0x3>
 756:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 75a:	08 95       	ret

0000075c <vfprintf>:
 75c:	ab e0       	ldi	r26, 0x0B	; 11
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	e4 eb       	ldi	r30, 0xB4	; 180
 762:	f3 e0       	ldi	r31, 0x03	; 3
 764:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__prologue_saves__>
 768:	6c 01       	movw	r12, r24
 76a:	7b 01       	movw	r14, r22
 76c:	8a 01       	movw	r16, r20
 76e:	fc 01       	movw	r30, r24
 770:	17 82       	std	Z+7, r1	; 0x07
 772:	16 82       	std	Z+6, r1	; 0x06
 774:	83 81       	ldd	r24, Z+3	; 0x03
 776:	81 ff       	sbrs	r24, 1
 778:	cc c1       	rjmp	.+920    	; 0xb12 <__stack+0x213>
 77a:	ce 01       	movw	r24, r28
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	3c 01       	movw	r6, r24
 780:	f6 01       	movw	r30, r12
 782:	93 81       	ldd	r25, Z+3	; 0x03
 784:	f7 01       	movw	r30, r14
 786:	93 fd       	sbrc	r25, 3
 788:	85 91       	lpm	r24, Z+
 78a:	93 ff       	sbrs	r25, 3
 78c:	81 91       	ld	r24, Z+
 78e:	7f 01       	movw	r14, r30
 790:	88 23       	and	r24, r24
 792:	09 f4       	brne	.+2      	; 0x796 <vfprintf+0x3a>
 794:	ba c1       	rjmp	.+884    	; 0xb0a <__stack+0x20b>
 796:	85 32       	cpi	r24, 0x25	; 37
 798:	39 f4       	brne	.+14     	; 0x7a8 <vfprintf+0x4c>
 79a:	93 fd       	sbrc	r25, 3
 79c:	85 91       	lpm	r24, Z+
 79e:	93 ff       	sbrs	r25, 3
 7a0:	81 91       	ld	r24, Z+
 7a2:	7f 01       	movw	r14, r30
 7a4:	85 32       	cpi	r24, 0x25	; 37
 7a6:	29 f4       	brne	.+10     	; 0x7b2 <vfprintf+0x56>
 7a8:	b6 01       	movw	r22, r12
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 7b0:	e7 cf       	rjmp	.-50     	; 0x780 <vfprintf+0x24>
 7b2:	91 2c       	mov	r9, r1
 7b4:	21 2c       	mov	r2, r1
 7b6:	31 2c       	mov	r3, r1
 7b8:	ff e1       	ldi	r31, 0x1F	; 31
 7ba:	f3 15       	cp	r31, r3
 7bc:	d8 f0       	brcs	.+54     	; 0x7f4 <vfprintf+0x98>
 7be:	8b 32       	cpi	r24, 0x2B	; 43
 7c0:	79 f0       	breq	.+30     	; 0x7e0 <vfprintf+0x84>
 7c2:	38 f4       	brcc	.+14     	; 0x7d2 <vfprintf+0x76>
 7c4:	80 32       	cpi	r24, 0x20	; 32
 7c6:	79 f0       	breq	.+30     	; 0x7e6 <vfprintf+0x8a>
 7c8:	83 32       	cpi	r24, 0x23	; 35
 7ca:	a1 f4       	brne	.+40     	; 0x7f4 <vfprintf+0x98>
 7cc:	23 2d       	mov	r18, r3
 7ce:	20 61       	ori	r18, 0x10	; 16
 7d0:	1d c0       	rjmp	.+58     	; 0x80c <vfprintf+0xb0>
 7d2:	8d 32       	cpi	r24, 0x2D	; 45
 7d4:	61 f0       	breq	.+24     	; 0x7ee <vfprintf+0x92>
 7d6:	80 33       	cpi	r24, 0x30	; 48
 7d8:	69 f4       	brne	.+26     	; 0x7f4 <vfprintf+0x98>
 7da:	23 2d       	mov	r18, r3
 7dc:	21 60       	ori	r18, 0x01	; 1
 7de:	16 c0       	rjmp	.+44     	; 0x80c <vfprintf+0xb0>
 7e0:	83 2d       	mov	r24, r3
 7e2:	82 60       	ori	r24, 0x02	; 2
 7e4:	38 2e       	mov	r3, r24
 7e6:	e3 2d       	mov	r30, r3
 7e8:	e4 60       	ori	r30, 0x04	; 4
 7ea:	3e 2e       	mov	r3, r30
 7ec:	2a c0       	rjmp	.+84     	; 0x842 <vfprintf+0xe6>
 7ee:	f3 2d       	mov	r31, r3
 7f0:	f8 60       	ori	r31, 0x08	; 8
 7f2:	1d c0       	rjmp	.+58     	; 0x82e <vfprintf+0xd2>
 7f4:	37 fc       	sbrc	r3, 7
 7f6:	2d c0       	rjmp	.+90     	; 0x852 <vfprintf+0xf6>
 7f8:	20 ed       	ldi	r18, 0xD0	; 208
 7fa:	28 0f       	add	r18, r24
 7fc:	2a 30       	cpi	r18, 0x0A	; 10
 7fe:	40 f0       	brcs	.+16     	; 0x810 <vfprintf+0xb4>
 800:	8e 32       	cpi	r24, 0x2E	; 46
 802:	b9 f4       	brne	.+46     	; 0x832 <vfprintf+0xd6>
 804:	36 fc       	sbrc	r3, 6
 806:	81 c1       	rjmp	.+770    	; 0xb0a <__stack+0x20b>
 808:	23 2d       	mov	r18, r3
 80a:	20 64       	ori	r18, 0x40	; 64
 80c:	32 2e       	mov	r3, r18
 80e:	19 c0       	rjmp	.+50     	; 0x842 <vfprintf+0xe6>
 810:	36 fe       	sbrs	r3, 6
 812:	06 c0       	rjmp	.+12     	; 0x820 <vfprintf+0xc4>
 814:	8a e0       	ldi	r24, 0x0A	; 10
 816:	98 9e       	mul	r9, r24
 818:	20 0d       	add	r18, r0
 81a:	11 24       	eor	r1, r1
 81c:	92 2e       	mov	r9, r18
 81e:	11 c0       	rjmp	.+34     	; 0x842 <vfprintf+0xe6>
 820:	ea e0       	ldi	r30, 0x0A	; 10
 822:	2e 9e       	mul	r2, r30
 824:	20 0d       	add	r18, r0
 826:	11 24       	eor	r1, r1
 828:	22 2e       	mov	r2, r18
 82a:	f3 2d       	mov	r31, r3
 82c:	f0 62       	ori	r31, 0x20	; 32
 82e:	3f 2e       	mov	r3, r31
 830:	08 c0       	rjmp	.+16     	; 0x842 <vfprintf+0xe6>
 832:	8c 36       	cpi	r24, 0x6C	; 108
 834:	21 f4       	brne	.+8      	; 0x83e <vfprintf+0xe2>
 836:	83 2d       	mov	r24, r3
 838:	80 68       	ori	r24, 0x80	; 128
 83a:	38 2e       	mov	r3, r24
 83c:	02 c0       	rjmp	.+4      	; 0x842 <vfprintf+0xe6>
 83e:	88 36       	cpi	r24, 0x68	; 104
 840:	41 f4       	brne	.+16     	; 0x852 <vfprintf+0xf6>
 842:	f7 01       	movw	r30, r14
 844:	93 fd       	sbrc	r25, 3
 846:	85 91       	lpm	r24, Z+
 848:	93 ff       	sbrs	r25, 3
 84a:	81 91       	ld	r24, Z+
 84c:	7f 01       	movw	r14, r30
 84e:	81 11       	cpse	r24, r1
 850:	b3 cf       	rjmp	.-154    	; 0x7b8 <vfprintf+0x5c>
 852:	98 2f       	mov	r25, r24
 854:	9f 7d       	andi	r25, 0xDF	; 223
 856:	95 54       	subi	r25, 0x45	; 69
 858:	93 30       	cpi	r25, 0x03	; 3
 85a:	28 f4       	brcc	.+10     	; 0x866 <vfprintf+0x10a>
 85c:	0c 5f       	subi	r16, 0xFC	; 252
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	9f e3       	ldi	r25, 0x3F	; 63
 862:	99 83       	std	Y+1, r25	; 0x01
 864:	0d c0       	rjmp	.+26     	; 0x880 <vfprintf+0x124>
 866:	83 36       	cpi	r24, 0x63	; 99
 868:	31 f0       	breq	.+12     	; 0x876 <vfprintf+0x11a>
 86a:	83 37       	cpi	r24, 0x73	; 115
 86c:	71 f0       	breq	.+28     	; 0x88a <vfprintf+0x12e>
 86e:	83 35       	cpi	r24, 0x53	; 83
 870:	09 f0       	breq	.+2      	; 0x874 <vfprintf+0x118>
 872:	59 c0       	rjmp	.+178    	; 0x926 <__stack+0x27>
 874:	21 c0       	rjmp	.+66     	; 0x8b8 <vfprintf+0x15c>
 876:	f8 01       	movw	r30, r16
 878:	80 81       	ld	r24, Z
 87a:	89 83       	std	Y+1, r24	; 0x01
 87c:	0e 5f       	subi	r16, 0xFE	; 254
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	88 24       	eor	r8, r8
 882:	83 94       	inc	r8
 884:	91 2c       	mov	r9, r1
 886:	53 01       	movw	r10, r6
 888:	13 c0       	rjmp	.+38     	; 0x8b0 <vfprintf+0x154>
 88a:	28 01       	movw	r4, r16
 88c:	f2 e0       	ldi	r31, 0x02	; 2
 88e:	4f 0e       	add	r4, r31
 890:	51 1c       	adc	r5, r1
 892:	f8 01       	movw	r30, r16
 894:	a0 80       	ld	r10, Z
 896:	b1 80       	ldd	r11, Z+1	; 0x01
 898:	36 fe       	sbrs	r3, 6
 89a:	03 c0       	rjmp	.+6      	; 0x8a2 <vfprintf+0x146>
 89c:	69 2d       	mov	r22, r9
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <vfprintf+0x14a>
 8a2:	6f ef       	ldi	r22, 0xFF	; 255
 8a4:	7f ef       	ldi	r23, 0xFF	; 255
 8a6:	c5 01       	movw	r24, r10
 8a8:	0e 94 9a 05 	call	0xb34	; 0xb34 <strnlen>
 8ac:	4c 01       	movw	r8, r24
 8ae:	82 01       	movw	r16, r4
 8b0:	f3 2d       	mov	r31, r3
 8b2:	ff 77       	andi	r31, 0x7F	; 127
 8b4:	3f 2e       	mov	r3, r31
 8b6:	16 c0       	rjmp	.+44     	; 0x8e4 <vfprintf+0x188>
 8b8:	28 01       	movw	r4, r16
 8ba:	22 e0       	ldi	r18, 0x02	; 2
 8bc:	42 0e       	add	r4, r18
 8be:	51 1c       	adc	r5, r1
 8c0:	f8 01       	movw	r30, r16
 8c2:	a0 80       	ld	r10, Z
 8c4:	b1 80       	ldd	r11, Z+1	; 0x01
 8c6:	36 fe       	sbrs	r3, 6
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <vfprintf+0x174>
 8ca:	69 2d       	mov	r22, r9
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <vfprintf+0x178>
 8d0:	6f ef       	ldi	r22, 0xFF	; 255
 8d2:	7f ef       	ldi	r23, 0xFF	; 255
 8d4:	c5 01       	movw	r24, r10
 8d6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <strnlen_P>
 8da:	4c 01       	movw	r8, r24
 8dc:	f3 2d       	mov	r31, r3
 8de:	f0 68       	ori	r31, 0x80	; 128
 8e0:	3f 2e       	mov	r3, r31
 8e2:	82 01       	movw	r16, r4
 8e4:	33 fc       	sbrc	r3, 3
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
 8e8:	82 2d       	mov	r24, r2
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	88 16       	cp	r8, r24
 8ee:	99 06       	cpc	r9, r25
 8f0:	b0 f4       	brcc	.+44     	; 0x91e <__stack+0x1f>
 8f2:	b6 01       	movw	r22, r12
 8f4:	80 e2       	ldi	r24, 0x20	; 32
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 8fc:	2a 94       	dec	r2
 8fe:	f4 cf       	rjmp	.-24     	; 0x8e8 <vfprintf+0x18c>
 900:	f5 01       	movw	r30, r10
 902:	37 fc       	sbrc	r3, 7
 904:	85 91       	lpm	r24, Z+
 906:	37 fe       	sbrs	r3, 7
 908:	81 91       	ld	r24, Z+
 90a:	5f 01       	movw	r10, r30
 90c:	b6 01       	movw	r22, r12
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 914:	21 10       	cpse	r2, r1
 916:	2a 94       	dec	r2
 918:	21 e0       	ldi	r18, 0x01	; 1
 91a:	82 1a       	sub	r8, r18
 91c:	91 08       	sbc	r9, r1
 91e:	81 14       	cp	r8, r1
 920:	91 04       	cpc	r9, r1
 922:	71 f7       	brne	.-36     	; 0x900 <__stack+0x1>
 924:	e8 c0       	rjmp	.+464    	; 0xaf6 <__stack+0x1f7>
 926:	84 36       	cpi	r24, 0x64	; 100
 928:	11 f0       	breq	.+4      	; 0x92e <__stack+0x2f>
 92a:	89 36       	cpi	r24, 0x69	; 105
 92c:	41 f5       	brne	.+80     	; 0x97e <__stack+0x7f>
 92e:	f8 01       	movw	r30, r16
 930:	37 fe       	sbrs	r3, 7
 932:	07 c0       	rjmp	.+14     	; 0x942 <__stack+0x43>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	0c 5f       	subi	r16, 0xFC	; 252
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	08 c0       	rjmp	.+16     	; 0x952 <__stack+0x53>
 942:	60 81       	ld	r22, Z
 944:	71 81       	ldd	r23, Z+1	; 0x01
 946:	07 2e       	mov	r0, r23
 948:	00 0c       	add	r0, r0
 94a:	88 0b       	sbc	r24, r24
 94c:	99 0b       	sbc	r25, r25
 94e:	0e 5f       	subi	r16, 0xFE	; 254
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	f3 2d       	mov	r31, r3
 954:	ff 76       	andi	r31, 0x6F	; 111
 956:	3f 2e       	mov	r3, r31
 958:	97 ff       	sbrs	r25, 7
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__stack+0x6f>
 95c:	90 95       	com	r25
 95e:	80 95       	com	r24
 960:	70 95       	com	r23
 962:	61 95       	neg	r22
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	f0 68       	ori	r31, 0x80	; 128
 96c:	3f 2e       	mov	r3, r31
 96e:	2a e0       	ldi	r18, 0x0A	; 10
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	a3 01       	movw	r20, r6
 974:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__ultoa_invert>
 978:	88 2e       	mov	r8, r24
 97a:	86 18       	sub	r8, r6
 97c:	45 c0       	rjmp	.+138    	; 0xa08 <__stack+0x109>
 97e:	85 37       	cpi	r24, 0x75	; 117
 980:	31 f4       	brne	.+12     	; 0x98e <__stack+0x8f>
 982:	23 2d       	mov	r18, r3
 984:	2f 7e       	andi	r18, 0xEF	; 239
 986:	b2 2e       	mov	r11, r18
 988:	2a e0       	ldi	r18, 0x0A	; 10
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	25 c0       	rjmp	.+74     	; 0x9d8 <__stack+0xd9>
 98e:	93 2d       	mov	r25, r3
 990:	99 7f       	andi	r25, 0xF9	; 249
 992:	b9 2e       	mov	r11, r25
 994:	8f 36       	cpi	r24, 0x6F	; 111
 996:	c1 f0       	breq	.+48     	; 0x9c8 <__stack+0xc9>
 998:	18 f4       	brcc	.+6      	; 0x9a0 <__stack+0xa1>
 99a:	88 35       	cpi	r24, 0x58	; 88
 99c:	79 f0       	breq	.+30     	; 0x9bc <__stack+0xbd>
 99e:	b5 c0       	rjmp	.+362    	; 0xb0a <__stack+0x20b>
 9a0:	80 37       	cpi	r24, 0x70	; 112
 9a2:	19 f0       	breq	.+6      	; 0x9aa <__stack+0xab>
 9a4:	88 37       	cpi	r24, 0x78	; 120
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <__stack+0xb1>
 9a8:	b0 c0       	rjmp	.+352    	; 0xb0a <__stack+0x20b>
 9aa:	e9 2f       	mov	r30, r25
 9ac:	e0 61       	ori	r30, 0x10	; 16
 9ae:	be 2e       	mov	r11, r30
 9b0:	b4 fe       	sbrs	r11, 4
 9b2:	0d c0       	rjmp	.+26     	; 0x9ce <__stack+0xcf>
 9b4:	fb 2d       	mov	r31, r11
 9b6:	f4 60       	ori	r31, 0x04	; 4
 9b8:	bf 2e       	mov	r11, r31
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <__stack+0xcf>
 9bc:	34 fe       	sbrs	r3, 4
 9be:	0a c0       	rjmp	.+20     	; 0x9d4 <__stack+0xd5>
 9c0:	29 2f       	mov	r18, r25
 9c2:	26 60       	ori	r18, 0x06	; 6
 9c4:	b2 2e       	mov	r11, r18
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__stack+0xd5>
 9c8:	28 e0       	ldi	r18, 0x08	; 8
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <__stack+0xd9>
 9ce:	20 e1       	ldi	r18, 0x10	; 16
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <__stack+0xd9>
 9d4:	20 e1       	ldi	r18, 0x10	; 16
 9d6:	32 e0       	ldi	r19, 0x02	; 2
 9d8:	f8 01       	movw	r30, r16
 9da:	b7 fe       	sbrs	r11, 7
 9dc:	07 c0       	rjmp	.+14     	; 0x9ec <__stack+0xed>
 9de:	60 81       	ld	r22, Z
 9e0:	71 81       	ldd	r23, Z+1	; 0x01
 9e2:	82 81       	ldd	r24, Z+2	; 0x02
 9e4:	93 81       	ldd	r25, Z+3	; 0x03
 9e6:	0c 5f       	subi	r16, 0xFC	; 252
 9e8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <__stack+0xf9>
 9ec:	60 81       	ld	r22, Z
 9ee:	71 81       	ldd	r23, Z+1	; 0x01
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 5f       	subi	r16, 0xFE	; 254
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	a3 01       	movw	r20, r6
 9fa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__ultoa_invert>
 9fe:	88 2e       	mov	r8, r24
 a00:	86 18       	sub	r8, r6
 a02:	fb 2d       	mov	r31, r11
 a04:	ff 77       	andi	r31, 0x7F	; 127
 a06:	3f 2e       	mov	r3, r31
 a08:	36 fe       	sbrs	r3, 6
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__stack+0x127>
 a0c:	23 2d       	mov	r18, r3
 a0e:	2e 7f       	andi	r18, 0xFE	; 254
 a10:	a2 2e       	mov	r10, r18
 a12:	89 14       	cp	r8, r9
 a14:	58 f4       	brcc	.+22     	; 0xa2c <__stack+0x12d>
 a16:	34 fe       	sbrs	r3, 4
 a18:	0b c0       	rjmp	.+22     	; 0xa30 <__stack+0x131>
 a1a:	32 fc       	sbrc	r3, 2
 a1c:	09 c0       	rjmp	.+18     	; 0xa30 <__stack+0x131>
 a1e:	83 2d       	mov	r24, r3
 a20:	8e 7e       	andi	r24, 0xEE	; 238
 a22:	a8 2e       	mov	r10, r24
 a24:	05 c0       	rjmp	.+10     	; 0xa30 <__stack+0x131>
 a26:	b8 2c       	mov	r11, r8
 a28:	a3 2c       	mov	r10, r3
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <__stack+0x133>
 a2c:	b8 2c       	mov	r11, r8
 a2e:	01 c0       	rjmp	.+2      	; 0xa32 <__stack+0x133>
 a30:	b9 2c       	mov	r11, r9
 a32:	a4 fe       	sbrs	r10, 4
 a34:	0f c0       	rjmp	.+30     	; 0xa54 <__stack+0x155>
 a36:	fe 01       	movw	r30, r28
 a38:	e8 0d       	add	r30, r8
 a3a:	f1 1d       	adc	r31, r1
 a3c:	80 81       	ld	r24, Z
 a3e:	80 33       	cpi	r24, 0x30	; 48
 a40:	21 f4       	brne	.+8      	; 0xa4a <__stack+0x14b>
 a42:	9a 2d       	mov	r25, r10
 a44:	99 7e       	andi	r25, 0xE9	; 233
 a46:	a9 2e       	mov	r10, r25
 a48:	09 c0       	rjmp	.+18     	; 0xa5c <__stack+0x15d>
 a4a:	a2 fe       	sbrs	r10, 2
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <__stack+0x15b>
 a4e:	b3 94       	inc	r11
 a50:	b3 94       	inc	r11
 a52:	04 c0       	rjmp	.+8      	; 0xa5c <__stack+0x15d>
 a54:	8a 2d       	mov	r24, r10
 a56:	86 78       	andi	r24, 0x86	; 134
 a58:	09 f0       	breq	.+2      	; 0xa5c <__stack+0x15d>
 a5a:	b3 94       	inc	r11
 a5c:	a3 fc       	sbrc	r10, 3
 a5e:	11 c0       	rjmp	.+34     	; 0xa82 <__stack+0x183>
 a60:	a0 fe       	sbrs	r10, 0
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <__stack+0x171>
 a64:	b2 14       	cp	r11, r2
 a66:	88 f4       	brcc	.+34     	; 0xa8a <__stack+0x18b>
 a68:	28 0c       	add	r2, r8
 a6a:	92 2c       	mov	r9, r2
 a6c:	9b 18       	sub	r9, r11
 a6e:	0e c0       	rjmp	.+28     	; 0xa8c <__stack+0x18d>
 a70:	b2 14       	cp	r11, r2
 a72:	60 f4       	brcc	.+24     	; 0xa8c <__stack+0x18d>
 a74:	b6 01       	movw	r22, r12
 a76:	80 e2       	ldi	r24, 0x20	; 32
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 a7e:	b3 94       	inc	r11
 a80:	f7 cf       	rjmp	.-18     	; 0xa70 <__stack+0x171>
 a82:	b2 14       	cp	r11, r2
 a84:	18 f4       	brcc	.+6      	; 0xa8c <__stack+0x18d>
 a86:	2b 18       	sub	r2, r11
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x18f>
 a8a:	98 2c       	mov	r9, r8
 a8c:	21 2c       	mov	r2, r1
 a8e:	a4 fe       	sbrs	r10, 4
 a90:	10 c0       	rjmp	.+32     	; 0xab2 <__stack+0x1b3>
 a92:	b6 01       	movw	r22, r12
 a94:	80 e3       	ldi	r24, 0x30	; 48
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 a9c:	a2 fe       	sbrs	r10, 2
 a9e:	17 c0       	rjmp	.+46     	; 0xace <__stack+0x1cf>
 aa0:	a1 fc       	sbrc	r10, 1
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <__stack+0x1ab>
 aa4:	88 e7       	ldi	r24, 0x78	; 120
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <__stack+0x1af>
 aaa:	88 e5       	ldi	r24, 0x58	; 88
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	b6 01       	movw	r22, r12
 ab0:	0c c0       	rjmp	.+24     	; 0xaca <__stack+0x1cb>
 ab2:	8a 2d       	mov	r24, r10
 ab4:	86 78       	andi	r24, 0x86	; 134
 ab6:	59 f0       	breq	.+22     	; 0xace <__stack+0x1cf>
 ab8:	a1 fe       	sbrs	r10, 1
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <__stack+0x1c1>
 abc:	8b e2       	ldi	r24, 0x2B	; 43
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <__stack+0x1c3>
 ac0:	80 e2       	ldi	r24, 0x20	; 32
 ac2:	a7 fc       	sbrc	r10, 7
 ac4:	8d e2       	ldi	r24, 0x2D	; 45
 ac6:	b6 01       	movw	r22, r12
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 ace:	89 14       	cp	r8, r9
 ad0:	38 f4       	brcc	.+14     	; 0xae0 <__stack+0x1e1>
 ad2:	b6 01       	movw	r22, r12
 ad4:	80 e3       	ldi	r24, 0x30	; 48
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 adc:	9a 94       	dec	r9
 ade:	f7 cf       	rjmp	.-18     	; 0xace <__stack+0x1cf>
 ae0:	8a 94       	dec	r8
 ae2:	f3 01       	movw	r30, r6
 ae4:	e8 0d       	add	r30, r8
 ae6:	f1 1d       	adc	r31, r1
 ae8:	80 81       	ld	r24, Z
 aea:	b6 01       	movw	r22, r12
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 af2:	81 10       	cpse	r8, r1
 af4:	f5 cf       	rjmp	.-22     	; 0xae0 <__stack+0x1e1>
 af6:	22 20       	and	r2, r2
 af8:	09 f4       	brne	.+2      	; 0xafc <__stack+0x1fd>
 afa:	42 ce       	rjmp	.-892    	; 0x780 <vfprintf+0x24>
 afc:	b6 01       	movw	r22, r12
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	0e 94 a5 05 	call	0xb4a	; 0xb4a <fputc>
 b06:	2a 94       	dec	r2
 b08:	f6 cf       	rjmp	.-20     	; 0xaf6 <__stack+0x1f7>
 b0a:	f6 01       	movw	r30, r12
 b0c:	86 81       	ldd	r24, Z+6	; 0x06
 b0e:	97 81       	ldd	r25, Z+7	; 0x07
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x217>
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	2b 96       	adiw	r28, 0x0b	; 11
 b18:	e2 e1       	ldi	r30, 0x12	; 18
 b1a:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__epilogue_restores__>

00000b1e <strnlen_P>:
 b1e:	fc 01       	movw	r30, r24
 b20:	05 90       	lpm	r0, Z+
 b22:	61 50       	subi	r22, 0x01	; 1
 b24:	70 40       	sbci	r23, 0x00	; 0
 b26:	01 10       	cpse	r0, r1
 b28:	d8 f7       	brcc	.-10     	; 0xb20 <strnlen_P+0x2>
 b2a:	80 95       	com	r24
 b2c:	90 95       	com	r25
 b2e:	8e 0f       	add	r24, r30
 b30:	9f 1f       	adc	r25, r31
 b32:	08 95       	ret

00000b34 <strnlen>:
 b34:	fc 01       	movw	r30, r24
 b36:	61 50       	subi	r22, 0x01	; 1
 b38:	70 40       	sbci	r23, 0x00	; 0
 b3a:	01 90       	ld	r0, Z+
 b3c:	01 10       	cpse	r0, r1
 b3e:	d8 f7       	brcc	.-10     	; 0xb36 <strnlen+0x2>
 b40:	80 95       	com	r24
 b42:	90 95       	com	r25
 b44:	8e 0f       	add	r24, r30
 b46:	9f 1f       	adc	r25, r31
 b48:	08 95       	ret

00000b4a <fputc>:
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	fb 01       	movw	r30, r22
 b54:	23 81       	ldd	r18, Z+3	; 0x03
 b56:	21 fd       	sbrc	r18, 1
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <fputc+0x16>
 b5a:	8f ef       	ldi	r24, 0xFF	; 255
 b5c:	9f ef       	ldi	r25, 0xFF	; 255
 b5e:	2c c0       	rjmp	.+88     	; 0xbb8 <fputc+0x6e>
 b60:	22 ff       	sbrs	r18, 2
 b62:	16 c0       	rjmp	.+44     	; 0xb90 <fputc+0x46>
 b64:	46 81       	ldd	r20, Z+6	; 0x06
 b66:	57 81       	ldd	r21, Z+7	; 0x07
 b68:	24 81       	ldd	r18, Z+4	; 0x04
 b6a:	35 81       	ldd	r19, Z+5	; 0x05
 b6c:	42 17       	cp	r20, r18
 b6e:	53 07       	cpc	r21, r19
 b70:	44 f4       	brge	.+16     	; 0xb82 <fputc+0x38>
 b72:	a0 81       	ld	r26, Z
 b74:	b1 81       	ldd	r27, Z+1	; 0x01
 b76:	9d 01       	movw	r18, r26
 b78:	2f 5f       	subi	r18, 0xFF	; 255
 b7a:	3f 4f       	sbci	r19, 0xFF	; 255
 b7c:	31 83       	std	Z+1, r19	; 0x01
 b7e:	20 83       	st	Z, r18
 b80:	8c 93       	st	X, r24
 b82:	26 81       	ldd	r18, Z+6	; 0x06
 b84:	37 81       	ldd	r19, Z+7	; 0x07
 b86:	2f 5f       	subi	r18, 0xFF	; 255
 b88:	3f 4f       	sbci	r19, 0xFF	; 255
 b8a:	37 83       	std	Z+7, r19	; 0x07
 b8c:	26 83       	std	Z+6, r18	; 0x06
 b8e:	14 c0       	rjmp	.+40     	; 0xbb8 <fputc+0x6e>
 b90:	8b 01       	movw	r16, r22
 b92:	ec 01       	movw	r28, r24
 b94:	fb 01       	movw	r30, r22
 b96:	00 84       	ldd	r0, Z+8	; 0x08
 b98:	f1 85       	ldd	r31, Z+9	; 0x09
 b9a:	e0 2d       	mov	r30, r0
 b9c:	09 95       	icall
 b9e:	89 2b       	or	r24, r25
 ba0:	e1 f6       	brne	.-72     	; 0xb5a <fputc+0x10>
 ba2:	d8 01       	movw	r26, r16
 ba4:	16 96       	adiw	r26, 0x06	; 6
 ba6:	8d 91       	ld	r24, X+
 ba8:	9c 91       	ld	r25, X
 baa:	17 97       	sbiw	r26, 0x07	; 7
 bac:	01 96       	adiw	r24, 0x01	; 1
 bae:	17 96       	adiw	r26, 0x07	; 7
 bb0:	9c 93       	st	X, r25
 bb2:	8e 93       	st	-X, r24
 bb4:	16 97       	sbiw	r26, 0x06	; 6
 bb6:	ce 01       	movw	r24, r28
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	1f 91       	pop	r17
 bbe:	0f 91       	pop	r16
 bc0:	08 95       	ret

00000bc2 <__ultoa_invert>:
 bc2:	fa 01       	movw	r30, r20
 bc4:	aa 27       	eor	r26, r26
 bc6:	28 30       	cpi	r18, 0x08	; 8
 bc8:	51 f1       	breq	.+84     	; 0xc1e <__ultoa_invert+0x5c>
 bca:	20 31       	cpi	r18, 0x10	; 16
 bcc:	81 f1       	breq	.+96     	; 0xc2e <__ultoa_invert+0x6c>
 bce:	e8 94       	clt
 bd0:	6f 93       	push	r22
 bd2:	6e 7f       	andi	r22, 0xFE	; 254
 bd4:	6e 5f       	subi	r22, 0xFE	; 254
 bd6:	7f 4f       	sbci	r23, 0xFF	; 255
 bd8:	8f 4f       	sbci	r24, 0xFF	; 255
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	af 4f       	sbci	r26, 0xFF	; 255
 bde:	b1 e0       	ldi	r27, 0x01	; 1
 be0:	3e d0       	rcall	.+124    	; 0xc5e <__ultoa_invert+0x9c>
 be2:	b4 e0       	ldi	r27, 0x04	; 4
 be4:	3c d0       	rcall	.+120    	; 0xc5e <__ultoa_invert+0x9c>
 be6:	67 0f       	add	r22, r23
 be8:	78 1f       	adc	r23, r24
 bea:	89 1f       	adc	r24, r25
 bec:	9a 1f       	adc	r25, r26
 bee:	a1 1d       	adc	r26, r1
 bf0:	68 0f       	add	r22, r24
 bf2:	79 1f       	adc	r23, r25
 bf4:	8a 1f       	adc	r24, r26
 bf6:	91 1d       	adc	r25, r1
 bf8:	a1 1d       	adc	r26, r1
 bfa:	6a 0f       	add	r22, r26
 bfc:	71 1d       	adc	r23, r1
 bfe:	81 1d       	adc	r24, r1
 c00:	91 1d       	adc	r25, r1
 c02:	a1 1d       	adc	r26, r1
 c04:	20 d0       	rcall	.+64     	; 0xc46 <__ultoa_invert+0x84>
 c06:	09 f4       	brne	.+2      	; 0xc0a <__ultoa_invert+0x48>
 c08:	68 94       	set
 c0a:	3f 91       	pop	r19
 c0c:	2a e0       	ldi	r18, 0x0A	; 10
 c0e:	26 9f       	mul	r18, r22
 c10:	11 24       	eor	r1, r1
 c12:	30 19       	sub	r19, r0
 c14:	30 5d       	subi	r19, 0xD0	; 208
 c16:	31 93       	st	Z+, r19
 c18:	de f6       	brtc	.-74     	; 0xbd0 <__ultoa_invert+0xe>
 c1a:	cf 01       	movw	r24, r30
 c1c:	08 95       	ret
 c1e:	46 2f       	mov	r20, r22
 c20:	47 70       	andi	r20, 0x07	; 7
 c22:	40 5d       	subi	r20, 0xD0	; 208
 c24:	41 93       	st	Z+, r20
 c26:	b3 e0       	ldi	r27, 0x03	; 3
 c28:	0f d0       	rcall	.+30     	; 0xc48 <__ultoa_invert+0x86>
 c2a:	c9 f7       	brne	.-14     	; 0xc1e <__ultoa_invert+0x5c>
 c2c:	f6 cf       	rjmp	.-20     	; 0xc1a <__ultoa_invert+0x58>
 c2e:	46 2f       	mov	r20, r22
 c30:	4f 70       	andi	r20, 0x0F	; 15
 c32:	40 5d       	subi	r20, 0xD0	; 208
 c34:	4a 33       	cpi	r20, 0x3A	; 58
 c36:	18 f0       	brcs	.+6      	; 0xc3e <__ultoa_invert+0x7c>
 c38:	49 5d       	subi	r20, 0xD9	; 217
 c3a:	31 fd       	sbrc	r19, 1
 c3c:	40 52       	subi	r20, 0x20	; 32
 c3e:	41 93       	st	Z+, r20
 c40:	02 d0       	rcall	.+4      	; 0xc46 <__ultoa_invert+0x84>
 c42:	a9 f7       	brne	.-22     	; 0xc2e <__ultoa_invert+0x6c>
 c44:	ea cf       	rjmp	.-44     	; 0xc1a <__ultoa_invert+0x58>
 c46:	b4 e0       	ldi	r27, 0x04	; 4
 c48:	a6 95       	lsr	r26
 c4a:	97 95       	ror	r25
 c4c:	87 95       	ror	r24
 c4e:	77 95       	ror	r23
 c50:	67 95       	ror	r22
 c52:	ba 95       	dec	r27
 c54:	c9 f7       	brne	.-14     	; 0xc48 <__ultoa_invert+0x86>
 c56:	00 97       	sbiw	r24, 0x00	; 0
 c58:	61 05       	cpc	r22, r1
 c5a:	71 05       	cpc	r23, r1
 c5c:	08 95       	ret
 c5e:	9b 01       	movw	r18, r22
 c60:	ac 01       	movw	r20, r24
 c62:	0a 2e       	mov	r0, r26
 c64:	06 94       	lsr	r0
 c66:	57 95       	ror	r21
 c68:	47 95       	ror	r20
 c6a:	37 95       	ror	r19
 c6c:	27 95       	ror	r18
 c6e:	ba 95       	dec	r27
 c70:	c9 f7       	brne	.-14     	; 0xc64 <__ultoa_invert+0xa2>
 c72:	62 0f       	add	r22, r18
 c74:	73 1f       	adc	r23, r19
 c76:	84 1f       	adc	r24, r20
 c78:	95 1f       	adc	r25, r21
 c7a:	a0 1d       	adc	r26, r0
 c7c:	08 95       	ret

00000c7e <__prologue_saves__>:
 c7e:	2f 92       	push	r2
 c80:	3f 92       	push	r3
 c82:	4f 92       	push	r4
 c84:	5f 92       	push	r5
 c86:	6f 92       	push	r6
 c88:	7f 92       	push	r7
 c8a:	8f 92       	push	r8
 c8c:	9f 92       	push	r9
 c8e:	af 92       	push	r10
 c90:	bf 92       	push	r11
 c92:	cf 92       	push	r12
 c94:	df 92       	push	r13
 c96:	ef 92       	push	r14
 c98:	ff 92       	push	r15
 c9a:	0f 93       	push	r16
 c9c:	1f 93       	push	r17
 c9e:	cf 93       	push	r28
 ca0:	df 93       	push	r29
 ca2:	cd b7       	in	r28, 0x3d	; 61
 ca4:	de b7       	in	r29, 0x3e	; 62
 ca6:	ca 1b       	sub	r28, r26
 ca8:	db 0b       	sbc	r29, r27
 caa:	0f b6       	in	r0, 0x3f	; 63
 cac:	f8 94       	cli
 cae:	de bf       	out	0x3e, r29	; 62
 cb0:	0f be       	out	0x3f, r0	; 63
 cb2:	cd bf       	out	0x3d, r28	; 61
 cb4:	09 94       	ijmp

00000cb6 <__epilogue_restores__>:
 cb6:	2a 88       	ldd	r2, Y+18	; 0x12
 cb8:	39 88       	ldd	r3, Y+17	; 0x11
 cba:	48 88       	ldd	r4, Y+16	; 0x10
 cbc:	5f 84       	ldd	r5, Y+15	; 0x0f
 cbe:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc0:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc2:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc4:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc6:	aa 84       	ldd	r10, Y+10	; 0x0a
 cc8:	b9 84       	ldd	r11, Y+9	; 0x09
 cca:	c8 84       	ldd	r12, Y+8	; 0x08
 ccc:	df 80       	ldd	r13, Y+7	; 0x07
 cce:	ee 80       	ldd	r14, Y+6	; 0x06
 cd0:	fd 80       	ldd	r15, Y+5	; 0x05
 cd2:	0c 81       	ldd	r16, Y+4	; 0x04
 cd4:	1b 81       	ldd	r17, Y+3	; 0x03
 cd6:	aa 81       	ldd	r26, Y+2	; 0x02
 cd8:	b9 81       	ldd	r27, Y+1	; 0x01
 cda:	ce 0f       	add	r28, r30
 cdc:	d1 1d       	adc	r29, r1
 cde:	0f b6       	in	r0, 0x3f	; 63
 ce0:	f8 94       	cli
 ce2:	de bf       	out	0x3e, r29	; 62
 ce4:	0f be       	out	0x3f, r0	; 63
 ce6:	cd bf       	out	0x3d, r28	; 61
 ce8:	ed 01       	movw	r28, r26
 cea:	08 95       	ret

00000cec <_exit>:
 cec:	f8 94       	cli

00000cee <__stop_program>:
 cee:	ff cf       	rjmp	.-2      	; 0xcee <__stop_program>
