
Lab09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012e  0080012e  00000dd4  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e25  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000007d  00000000  00000000  00002919  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000048  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000cbb  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008a6  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000455  00000000  00000000  00003f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000e0  00000000  00000000  000043d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000045b  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000004e0  00000000  00000000  00004913  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  00004df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e1       	ldi	r30, 0x12	; 18
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 32       	cpi	r26, 0x2E	; 46
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e2       	ldi	r26, 0x2E	; 46
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 33       	cpi	r26, 0x35	; 53
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  b2:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <getkey>:
				mydelayms(250);
			}
		}
    }
}
signed char getkey() {
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b0 e0       	ldi	r27, 0x00	; 0
	
	int key = -1;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	9f ef       	ldi	r25, 0xFF	; 255
	int col = 0;
	int maskRow = 0b00010000;
	int maskCol = 0b00000001;
	
	for(i = 4; i < 8; i++) {
		DDRA = maskRow << (i -4);
  ce:	00 e1       	ldi	r16, 0x10	; 16
  d0:	10 e0       	ldi	r17, 0x00	; 0
		PORTA = maskRow << (i - 4);
		row = (i - 4);
		
		for(j = 0; j < 4; j++) {
			if((PINA & (maskCol << j)) == (maskCol << j)) {
  d2:	e1 e0       	ldi	r30, 0x01	; 1
  d4:	f0 e0       	ldi	r31, 0x00	; 0
	int col = 0;
	int maskRow = 0b00010000;
	int maskCol = 0b00000001;
	
	for(i = 4; i < 8; i++) {
		DDRA = maskRow << (i -4);
  d6:	98 01       	movw	r18, r16
  d8:	0a 2e       	mov	r0, r26
  da:	02 c0       	rjmp	.+4      	; 0xe0 <getkey+0x26>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <getkey+0x22>
  e4:	21 b9       	out	0x01, r18	; 1
		PORTA = maskRow << (i - 4);
  e6:	22 b9       	out	0x02, r18	; 2
		row = (i - 4);
		
		for(j = 0; j < 4; j++) {
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
			if((PINA & (maskCol << j)) == (maskCol << j)) {
  ec:	20 b1       	in	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	af 01       	movw	r20, r30
  f2:	06 2e       	mov	r0, r22
  f4:	02 c0       	rjmp	.+4      	; 0xfa <getkey+0x40>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <getkey+0x3c>
  fe:	24 23       	and	r18, r20
 100:	35 23       	and	r19, r21
 102:	42 17       	cp	r20, r18
 104:	53 07       	cpc	r21, r19
 106:	19 f4       	brne	.+6      	; 0x10e <getkey+0x54>
 108:	cb 01       	movw	r24, r22
 10a:	8c 0f       	add	r24, r28
 10c:	9d 1f       	adc	r25, r29
	for(i = 4; i < 8; i++) {
		DDRA = maskRow << (i -4);
		PORTA = maskRow << (i - 4);
		row = (i - 4);
		
		for(j = 0; j < 4; j++) {
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	64 30       	cpi	r22, 0x04	; 4
 114:	71 05       	cpc	r23, r1
 116:	51 f7       	brne	.-44     	; 0xec <getkey+0x32>
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	24 96       	adiw	r28, 0x04	; 4
	int row = 0;
	int col = 0;
	int maskRow = 0b00010000;
	int maskCol = 0b00000001;
	
	for(i = 4; i < 8; i++) {
 11c:	a4 30       	cpi	r26, 0x04	; 4
 11e:	b1 05       	cpc	r27, r1
 120:	d1 f6       	brne	.-76     	; 0xd6 <getkey+0x1c>
				key = 4 * row + col;
			}
		}
	}
	return key;
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <mapkey>:

signed char mapkey(signed char key) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	60 97       	sbiw	r28, 0x10	; 16
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
	
	if((key < 0) || (key > 15)) {
 140:	80 31       	cpi	r24, 0x10	; 16
 142:	98 f4       	brcc	.+38     	; 0x16a <mapkey+0x3e>
		return key = -1;
	}
	
	signed char numkey[16] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
 144:	90 e1       	ldi	r25, 0x10	; 16
 146:	ee e0       	ldi	r30, 0x0E	; 14
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	de 01       	movw	r26, r28
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	01 90       	ld	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	9a 95       	dec	r25
 154:	e1 f7       	brne	.-8      	; 0x14e <mapkey+0x22>
	
	key = numkey[key];
 156:	e1 e0       	ldi	r30, 0x01	; 1
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ec 0f       	add	r30, r28
 15c:	fd 1f       	adc	r31, r29
 15e:	e8 0f       	add	r30, r24
 160:	f1 1d       	adc	r31, r1
 162:	87 fd       	sbrc	r24, 7
 164:	fa 95       	dec	r31
 166:	80 81       	ld	r24, Z
	
	return key;
 168:	01 c0       	rjmp	.+2      	; 0x16c <mapkey+0x40>
}

signed char mapkey(signed char key) {
	
	if((key < 0) || (key > 15)) {
		return key = -1;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
	signed char numkey[16] = {1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 9, 12, '*', 0, '#', 13};
	
	key = numkey[key];
	
	return key;
}
 16c:	60 96       	adiw	r28, 0x10	; 16
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <getpw>:

char getpw(char maxsize, char pw[]) {
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	e8 2e       	mov	r14, r24
 190:	6b 01       	movw	r12, r22
	
	char size = 0;
 192:	f1 2c       	mov	r15, r1
	int i;
	
	
	while(1) {
		
		while(getkey() != -1);
 194:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 198:	8f 3f       	cpi	r24, 0xFF	; 255
 19a:	e1 f7       	brne	.-8      	; 0x194 <getpw+0x16>
		while(getkey() == -1);
 19c:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1a0:	8f 3f       	cpi	r24, 0xFF	; 255
 1a2:	e1 f3       	breq	.-8      	; 0x19c <getpw+0x1e>
		
		
		if(size < maxsize) {
 1a4:	fe 14       	cp	r15, r14
 1a6:	78 f4       	brcc	.+30     	; 0x1c6 <getpw+0x48>
			if(mapkey(getkey()) <= 13) {
 1a8:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1ac:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1b0:	8e 30       	cpi	r24, 0x0E	; 14
 1b2:	4c f4       	brge	.+18     	; 0x1c6 <getpw+0x48>
				pw[size] = mapkey(getkey());
 1b4:	e6 01       	movw	r28, r12
 1b6:	cf 0d       	add	r28, r15
 1b8:	d1 1d       	adc	r29, r1
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1be:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1c2:	88 83       	st	Y, r24
				size++;
 1c4:	f3 94       	inc	r15
			}
		}
		
		if((mapkey(getkey()) == '*') && (size > 0)) {
 1c6:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1ca:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1ce:	8a 32       	cpi	r24, 0x2A	; 42
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <getpw+0x5a>
 1d2:	ff 20       	and	r15, r15
 1d4:	f1 f0       	breq	.+60     	; 0x212 <getpw+0x94>
			size -= 1;
 1d6:	fa 94       	dec	r15
		}
		
		if(mapkey(getkey()) == '#') {
 1d8:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 1dc:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 1e0:	83 32       	cpi	r24, 0x23	; 35
 1e2:	e9 f0       	breq	.+58     	; 0x21e <getpw+0xa0>
			return size;
		}
		lcd_iwrite(LCD_CLR);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
		for(i = 0; i < size; i++) {
 1ea:	0f 2d       	mov	r16, r15
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	10 16       	cp	r1, r16
 1f0:	11 06       	cpc	r1, r17
 1f2:	84 f6       	brge	.-96     	; 0x194 <getpw+0x16>
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
			printf("*");
 1f8:	8a e2       	ldi	r24, 0x2A	; 42
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 b8 03 	call	0x770	; 0x770 <putchar>
		
		if(mapkey(getkey()) == '#') {
			return size;
		}
		lcd_iwrite(LCD_CLR);
		for(i = 0; i < size; i++) {
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	c0 17       	cp	r28, r16
 204:	d1 07       	cpc	r29, r17
 206:	c1 f7       	brne	.-16     	; 0x1f8 <getpw+0x7a>
 208:	c5 cf       	rjmp	.-118    	; 0x194 <getpw+0x16>
		}
		
		if(mapkey(getkey()) == '#') {
			return size;
		}
		lcd_iwrite(LCD_CLR);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 210:	c1 cf       	rjmp	.-126    	; 0x194 <getpw+0x16>
		
		if((mapkey(getkey()) == '*') && (size > 0)) {
			size -= 1;
		}
		
		if(mapkey(getkey()) == '#') {
 212:	0e 94 5d 00 	call	0xba	; 0xba <getkey>
 216:	0e 94 96 00 	call	0x12c	; 0x12c <mapkey>
 21a:	83 32       	cpi	r24, 0x23	; 35
 21c:	b1 f7       	brne	.-20     	; 0x20a <getpw+0x8c>
		lcd_iwrite(LCD_CLR);
		for(i = 0; i < size; i++) {
			printf("*");
		}
	}
}
 21e:	8f 2d       	mov	r24, r15
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <compareArrays>:

char compareArrays(char SIZE, const char a1[], const char a2[]) {
	
	char i;
	
	for(i = 0; i < SIZE; i++) {
 232:	88 23       	and	r24, r24
 234:	c9 f0       	breq	.+50     	; 0x268 <compareArrays+0x36>
		if(a1[i] != a2[i]) {
 236:	fb 01       	movw	r30, r22
 238:	20 81       	ld	r18, Z
 23a:	fa 01       	movw	r30, r20
 23c:	90 81       	ld	r25, Z
 23e:	29 13       	cpse	r18, r25
 240:	15 c0       	rjmp	.+42     	; 0x26c <compareArrays+0x3a>
 242:	fb 01       	movw	r30, r22
 244:	31 96       	adiw	r30, 0x01	; 1
 246:	da 01       	movw	r26, r20
 248:	11 96       	adiw	r26, 0x01	; 1
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	68 0f       	add	r22, r24
 252:	79 1f       	adc	r23, r25
 254:	04 c0       	rjmp	.+8      	; 0x25e <compareArrays+0x2c>
 256:	91 91       	ld	r25, Z+
 258:	8d 91       	ld	r24, X+
 25a:	98 13       	cpse	r25, r24
 25c:	09 c0       	rjmp	.+18     	; 0x270 <compareArrays+0x3e>

char compareArrays(char SIZE, const char a1[], const char a2[]) {
	
	char i;
	
	for(i = 0; i < SIZE; i++) {
 25e:	e6 17       	cp	r30, r22
 260:	f7 07       	cpc	r31, r23
 262:	c9 f7       	brne	.-14     	; 0x256 <compareArrays+0x24>
		if(a1[i] != a2[i]) {
			return 0;
		}
	}
	return 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
	
	char i;
	
	for(i = 0; i < SIZE; i++) {
		if(a1[i] != a2[i]) {
			return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
 270:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
 272:	08 95       	ret

00000274 <mydelayms>:

void mydelayms(unsigned int ms) {
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	2a 97       	sbiw	r28, 0x0a	; 10
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	fc 01       	movw	r30, r24
	
	volatile int i;
	volatile long long int j;
	
	for(i = 0; i < ms; i++) {
 28a:	1a 82       	std	Y+2, r1	; 0x02
 28c:	19 82       	std	Y+1, r1	; 0x01
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
 292:	8e 17       	cp	r24, r30
 294:	9f 07       	cpc	r25, r31
 296:	08 f0       	brcs	.+2      	; 0x29a <mydelayms+0x26>
 298:	3f c0       	rjmp	.+126    	; 0x318 <mydelayms+0xa4>
		 for(j = 0; j < 12; j++){};
 29a:	1b 82       	std	Y+3, r1	; 0x03
 29c:	1c 82       	std	Y+4, r1	; 0x04
 29e:	1d 82       	std	Y+5, r1	; 0x05
 2a0:	1e 82       	std	Y+6, r1	; 0x06
 2a2:	1f 82       	std	Y+7, r1	; 0x07
 2a4:	18 86       	std	Y+8, r1	; 0x08
 2a6:	19 86       	std	Y+9, r1	; 0x09
 2a8:	1a 86       	std	Y+10, r1	; 0x0a
 2aa:	2b 81       	ldd	r18, Y+3	; 0x03
 2ac:	3c 81       	ldd	r19, Y+4	; 0x04
 2ae:	4d 81       	ldd	r20, Y+5	; 0x05
 2b0:	5e 81       	ldd	r21, Y+6	; 0x06
 2b2:	6f 81       	ldd	r22, Y+7	; 0x07
 2b4:	78 85       	ldd	r23, Y+8	; 0x08
 2b6:	89 85       	ldd	r24, Y+9	; 0x09
 2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ba:	ab e0       	ldi	r26, 0x0B	; 11
 2bc:	0e 94 96 03 	call	0x72c	; 0x72c <__cmpdi2_s8>
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <mydelayms+0x50>
 2c2:	04 f5       	brge	.+64     	; 0x304 <mydelayms+0x90>
 2c4:	2b 81       	ldd	r18, Y+3	; 0x03
 2c6:	3c 81       	ldd	r19, Y+4	; 0x04
 2c8:	4d 81       	ldd	r20, Y+5	; 0x05
 2ca:	5e 81       	ldd	r21, Y+6	; 0x06
 2cc:	6f 81       	ldd	r22, Y+7	; 0x07
 2ce:	78 85       	ldd	r23, Y+8	; 0x08
 2d0:	89 85       	ldd	r24, Y+9	; 0x09
 2d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d4:	a1 e0       	ldi	r26, 0x01	; 1
 2d6:	0e 94 8a 03 	call	0x714	; 0x714 <__adddi3_s8>
 2da:	2b 83       	std	Y+3, r18	; 0x03
 2dc:	3c 83       	std	Y+4, r19	; 0x04
 2de:	4d 83       	std	Y+5, r20	; 0x05
 2e0:	5e 83       	std	Y+6, r21	; 0x06
 2e2:	6f 83       	std	Y+7, r22	; 0x07
 2e4:	78 87       	std	Y+8, r23	; 0x08
 2e6:	89 87       	std	Y+9, r24	; 0x09
 2e8:	9a 87       	std	Y+10, r25	; 0x0a
 2ea:	2b 81       	ldd	r18, Y+3	; 0x03
 2ec:	3c 81       	ldd	r19, Y+4	; 0x04
 2ee:	4d 81       	ldd	r20, Y+5	; 0x05
 2f0:	5e 81       	ldd	r21, Y+6	; 0x06
 2f2:	6f 81       	ldd	r22, Y+7	; 0x07
 2f4:	78 85       	ldd	r23, Y+8	; 0x08
 2f6:	89 85       	ldd	r24, Y+9	; 0x09
 2f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 2fa:	ab e0       	ldi	r26, 0x0B	; 11
 2fc:	0e 94 96 03 	call	0x72c	; 0x72c <__cmpdi2_s8>
 300:	09 f3       	breq	.-62     	; 0x2c4 <mydelayms+0x50>
 302:	04 f3       	brlt	.-64     	; 0x2c4 <mydelayms+0x50>
void mydelayms(unsigned int ms) {
	
	volatile int i;
	volatile long long int j;
	
	for(i = 0; i < ms; i++) {
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	9a 83       	std	Y+2, r25	; 0x02
 30c:	89 83       	std	Y+1, r24	; 0x01
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	8e 17       	cp	r24, r30
 314:	9f 07       	cpc	r25, r31
 316:	08 f2       	brcs	.-126    	; 0x29a <mydelayms+0x26>
		 for(j = 0; j < 12; j++){};
	}
}
 318:	2a 96       	adiw	r28, 0x0a	; 10
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <main>:
signed char mapkey(signed char key);
char getpw(char maxsize, char pw[]); 	// Input keys into the array
char compareArrays(char size, const char a1[], const char a2[]);
void mydelayms(unsigned int ms);

void main(void) {
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	64 97       	sbiw	r28, 0x14	; 20
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	    char passwd[] = {10,2,13,4};			// Set the password in your function
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	8d e0       	ldi	r24, 0x0D	; 13
 348:	8b 83       	std	Y+3, r24	; 0x03
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	8c 83       	std	Y+4, r24	; 0x04
	    //	DDRA = 0xF0; // While running the lower 4 bits of PORTA will be inputs and the
	    // upper 4 bits will be outputs, but we'll make them outputs one at
	    // a time, so we'll actually control the data direction in getkey(),
	    // the keypad scanning routine.

	    lcd_init();		// Init the LCD display
 34e:	0e 94 9a 02 	call	0x534	; 0x534 <lcd_init>
	    stdout=&lcd_stdout;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <__iob+0x3>
 35a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__iob+0x2>
				}
			}
		}
		else {
			for(k = 0; k < 4; k++) {
				printf("Error");
 35e:	0f 2e       	mov	r0, r31
 360:	f8 e2       	ldi	r31, 0x28	; 40
 362:	ef 2e       	mov	r14, r31
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	ff 2e       	mov	r15, r31
 368:	f0 2d       	mov	r31, r0
		lcd_iwrite(LCD_CLR);
		usersize = getpw(BUFFSIZE, pwbuff);
		lcd_iwrite(LCD_CLR);
		if(usersize == pwsize) {
			if (compareArrays(pwsize, passwd, pwbuff) == 1) {
				printf("Open Lock");
 36a:	0f 2e       	mov	r0, r31
 36c:	fe e1       	ldi	r31, 0x1E	; 30
 36e:	cf 2e       	mov	r12, r31
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	df 2e       	mov	r13, r31
 374:	f0 2d       	mov	r31, r0
	    // the keypad scanning routine.

	    lcd_init();		// Init the LCD display
	    stdout=&lcd_stdout;
    while (1) {
		lcd_iwrite(LCD_CLR);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
		usersize = getpw(BUFFSIZE, pwbuff);
 37c:	be 01       	movw	r22, r28
 37e:	6b 5f       	subi	r22, 0xFB	; 251
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	0e 94 bf 00 	call	0x17e	; 0x17e <getpw>
 388:	18 2f       	mov	r17, r24
		lcd_iwrite(LCD_CLR);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
		if(usersize == pwsize) {
 390:	14 30       	cpi	r17, 0x04	; 4
 392:	81 f5       	brne	.+96     	; 0x3f4 <main+0xca>
			if (compareArrays(pwsize, passwd, pwbuff) == 1) {
 394:	ae 01       	movw	r20, r28
 396:	4b 5f       	subi	r20, 0xFB	; 251
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	be 01       	movw	r22, r28
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	0e 94 19 01 	call	0x232	; 0x232 <compareArrays>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	71 f4       	brne	.+28     	; 0x3c6 <main+0x9c>
				printf("Open Lock");
 3aa:	df 92       	push	r13
 3ac:	cf 92       	push	r12
 3ae:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
				mydelayms(2000);
 3b2:	80 ed       	ldi	r24, 0xD0	; 208
 3b4:	97 e0       	ldi	r25, 0x07	; 7
 3b6:	0e 94 3a 01 	call	0x274	; 0x274 <mydelayms>
				lcd_iwrite(LCD_CLR);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	d8 cf       	rjmp	.-80     	; 0x376 <main+0x4c>
 3c6:	04 e0       	ldi	r16, 0x04	; 4
 3c8:	10 e0       	ldi	r17, 0x00	; 0
			}
			else {
				for(k = 0; k < 4; k++) {
					printf("Error");
 3ca:	ff 92       	push	r15
 3cc:	ef 92       	push	r14
 3ce:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
					mydelayms(250);
 3d2:	8a ef       	ldi	r24, 0xFA	; 250
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 3a 01 	call	0x274	; 0x274 <mydelayms>
					lcd_iwrite(LCD_CLR);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
					mydelayms(250);
 3e0:	8a ef       	ldi	r24, 0xFA	; 250
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 3a 01 	call	0x274	; 0x274 <mydelayms>
 3e8:	01 50       	subi	r16, 0x01	; 1
 3ea:	11 09       	sbc	r17, r1
				printf("Open Lock");
				mydelayms(2000);
				lcd_iwrite(LCD_CLR);
			}
			else {
				for(k = 0; k < 4; k++) {
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	61 f7       	brne	.-40     	; 0x3ca <main+0xa0>
 3f2:	c1 cf       	rjmp	.-126    	; 0x376 <main+0x4c>
 3f4:	04 e0       	ldi	r16, 0x04	; 4
 3f6:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		}
		else {
			for(k = 0; k < 4; k++) {
				printf("Error");
 3f8:	ff 92       	push	r15
 3fa:	ef 92       	push	r14
 3fc:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
				mydelayms(250);
 400:	8a ef       	ldi	r24, 0xFA	; 250
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 3a 01 	call	0x274	; 0x274 <mydelayms>
				lcd_iwrite(LCD_CLR);
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
				mydelayms(250);
 40e:	8a ef       	ldi	r24, 0xFA	; 250
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 3a 01 	call	0x274	; 0x274 <mydelayms>
 416:	01 50       	subi	r16, 0x01	; 1
 418:	11 09       	sbc	r17, r1
					mydelayms(250);
				}
			}
		}
		else {
			for(k = 0; k < 4; k++) {
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	61 f7       	brne	.-40     	; 0x3f8 <main+0xce>
 420:	aa cf       	rjmp	.-172    	; 0x376 <main+0x4c>

00000422 <lcd_clk>:
 422:	47 9a       	sbi	0x08, 7	; 8
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_clk+0x4>
 42a:	00 00       	nop
 42c:	47 98       	cbi	0x08, 7	; 8
 42e:	85 e0       	ldi	r24, 0x05	; 5
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <lcd_clk+0xe>
 434:	00 00       	nop
 436:	08 95       	ret

00000438 <lcd_busy_wait>:
 438:	84 b1       	in	r24, 0x04	; 4
 43a:	80 7f       	andi	r24, 0xF0	; 240
 43c:	84 b9       	out	0x04, r24	; 4
 43e:	95 b1       	in	r25, 0x05	; 5
 440:	29 2f       	mov	r18, r25
 442:	20 71       	andi	r18, 0x10	; 16
 444:	2c 98       	cbi	0x05, 4	; 5
 446:	46 9a       	sbi	0x08, 6	; 8
 448:	47 9a       	sbi	0x08, 7	; 8
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	8a 95       	dec	r24
 44e:	f1 f7       	brne	.-4      	; 0x44c <lcd_busy_wait+0x14>
 450:	00 00       	nop
 452:	93 b1       	in	r25, 0x03	; 3
 454:	47 98       	cbi	0x08, 7	; 8
 456:	85 e0       	ldi	r24, 0x05	; 5
 458:	8a 95       	dec	r24
 45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_busy_wait+0x20>
 45c:	00 00       	nop
 45e:	47 9a       	sbi	0x08, 7	; 8
 460:	85 e0       	ldi	r24, 0x05	; 5
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <lcd_busy_wait+0x2a>
 466:	00 00       	nop
 468:	83 b1       	in	r24, 0x03	; 3
 46a:	92 95       	swap	r25
 46c:	90 7f       	andi	r25, 0xF0	; 240
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	89 2b       	or	r24, r25
 472:	47 98       	cbi	0x08, 7	; 8
 474:	95 e0       	ldi	r25, 0x05	; 5
 476:	9a 95       	dec	r25
 478:	f1 f7       	brne	.-4      	; 0x476 <lcd_busy_wait+0x3e>
 47a:	00 00       	nop
 47c:	87 fd       	sbrc	r24, 7
 47e:	e4 cf       	rjmp	.-56     	; 0x448 <lcd_busy_wait+0x10>
 480:	46 98       	cbi	0x08, 6	; 8
 482:	95 b1       	in	r25, 0x05	; 5
 484:	9f 7e       	andi	r25, 0xEF	; 239
 486:	92 2b       	or	r25, r18
 488:	95 b9       	out	0x05, r25	; 5
 48a:	94 b1       	in	r25, 0x04	; 4
 48c:	9f 60       	ori	r25, 0x0F	; 15
 48e:	94 b9       	out	0x04, r25	; 4
 490:	08 95       	ret

00000492 <lcd_dread>:
 492:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_busy_wait>
 496:	84 b1       	in	r24, 0x04	; 4
 498:	80 7f       	andi	r24, 0xF0	; 240
 49a:	84 b9       	out	0x04, r24	; 4
 49c:	46 9a       	sbi	0x08, 6	; 8
 49e:	47 9a       	sbi	0x08, 7	; 8
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	8a 95       	dec	r24
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_dread+0x10>
 4a6:	00 00       	nop
 4a8:	23 b1       	in	r18, 0x03	; 3
 4aa:	47 98       	cbi	0x08, 7	; 8
 4ac:	85 e0       	ldi	r24, 0x05	; 5
 4ae:	8a 95       	dec	r24
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <lcd_dread+0x1c>
 4b2:	00 00       	nop
 4b4:	47 9a       	sbi	0x08, 7	; 8
 4b6:	85 e0       	ldi	r24, 0x05	; 5
 4b8:	8a 95       	dec	r24
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <lcd_dread+0x26>
 4bc:	00 00       	nop
 4be:	93 b1       	in	r25, 0x03	; 3
 4c0:	22 95       	swap	r18
 4c2:	20 7f       	andi	r18, 0xF0	; 240
 4c4:	89 2f       	mov	r24, r25
 4c6:	8f 70       	andi	r24, 0x0F	; 15
 4c8:	47 98       	cbi	0x08, 7	; 8
 4ca:	46 98       	cbi	0x08, 6	; 8
 4cc:	94 b1       	in	r25, 0x04	; 4
 4ce:	9f 60       	ori	r25, 0x0F	; 15
 4d0:	94 b9       	out	0x04, r25	; 4
 4d2:	82 2b       	or	r24, r18
 4d4:	08 95       	ret

000004d6 <lcd_dwrite>:
 4d6:	cf 93       	push	r28
 4d8:	c8 2f       	mov	r28, r24
 4da:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_busy_wait>
 4de:	95 b1       	in	r25, 0x05	; 5
 4e0:	8c 2f       	mov	r24, r28
 4e2:	82 95       	swap	r24
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	90 7f       	andi	r25, 0xF0	; 240
 4e8:	98 2b       	or	r25, r24
 4ea:	95 b9       	out	0x05, r25	; 5
 4ec:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 4f0:	95 b1       	in	r25, 0x05	; 5
 4f2:	8c 2f       	mov	r24, r28
 4f4:	8f 70       	andi	r24, 0x0F	; 15
 4f6:	90 7f       	andi	r25, 0xF0	; 240
 4f8:	89 2b       	or	r24, r25
 4fa:	85 b9       	out	0x05, r24	; 5
 4fc:	cf 91       	pop	r28
 4fe:	0c 94 11 02 	jmp	0x422	; 0x422 <lcd_clk>

00000502 <lcd_iwrite>:
 502:	cf 93       	push	r28
 504:	c8 2f       	mov	r28, r24
 506:	2c 98       	cbi	0x05, 4	; 5
 508:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_busy_wait>
 50c:	95 b1       	in	r25, 0x05	; 5
 50e:	8c 2f       	mov	r24, r28
 510:	82 95       	swap	r24
 512:	8f 70       	andi	r24, 0x0F	; 15
 514:	90 7f       	andi	r25, 0xF0	; 240
 516:	98 2b       	or	r25, r24
 518:	95 b9       	out	0x05, r25	; 5
 51a:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 51e:	95 b1       	in	r25, 0x05	; 5
 520:	8c 2f       	mov	r24, r28
 522:	8f 70       	andi	r24, 0x0F	; 15
 524:	90 7f       	andi	r25, 0xF0	; 240
 526:	89 2b       	or	r24, r25
 528:	85 b9       	out	0x05, r24	; 5
 52a:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 52e:	2c 9a       	sbi	0x05, 4	; 5
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <lcd_init>:
 534:	85 b1       	in	r24, 0x05	; 5
 536:	80 7e       	andi	r24, 0xE0	; 224
 538:	85 b9       	out	0x05, r24	; 5
 53a:	2c 98       	cbi	0x05, 4	; 5
 53c:	46 98       	cbi	0x08, 6	; 8
 53e:	47 98       	cbi	0x08, 7	; 8
 540:	84 b1       	in	r24, 0x04	; 4
 542:	8f 61       	ori	r24, 0x1F	; 31
 544:	84 b9       	out	0x04, r24	; 4
 546:	87 b1       	in	r24, 0x07	; 7
 548:	80 6c       	ori	r24, 0xC0	; 192
 54a:	87 b9       	out	0x07, r24	; 7
 54c:	8f e5       	ldi	r24, 0x5F	; 95
 54e:	9a ee       	ldi	r25, 0xEA	; 234
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <lcd_init+0x1c>
 554:	00 c0       	rjmp	.+0      	; 0x556 <lcd_init+0x22>
 556:	00 00       	nop
 558:	85 b1       	in	r24, 0x05	; 5
 55a:	80 7f       	andi	r24, 0xF0	; 240
 55c:	83 60       	ori	r24, 0x03	; 3
 55e:	85 b9       	out	0x05, r24	; 5
 560:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 564:	87 e0       	ldi	r24, 0x07	; 7
 566:	90 e2       	ldi	r25, 0x20	; 32
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init+0x34>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <lcd_init+0x3a>
 56e:	00 00       	nop
 570:	85 b1       	in	r24, 0x05	; 5
 572:	80 7f       	andi	r24, 0xF0	; 240
 574:	83 60       	ori	r24, 0x03	; 3
 576:	85 b9       	out	0x05, r24	; 5
 578:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 57c:	87 ec       	ldi	r24, 0xC7	; 199
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x4c>
 584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_init+0x52>
 586:	00 00       	nop
 588:	85 b1       	in	r24, 0x05	; 5
 58a:	80 7f       	andi	r24, 0xF0	; 240
 58c:	83 60       	ori	r24, 0x03	; 3
 58e:	85 b9       	out	0x05, r24	; 5
 590:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 594:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_busy_wait>
 598:	85 b1       	in	r24, 0x05	; 5
 59a:	80 7f       	andi	r24, 0xF0	; 240
 59c:	82 60       	ori	r24, 0x02	; 2
 59e:	85 b9       	out	0x05, r24	; 5
 5a0:	0e 94 11 02 	call	0x422	; 0x422 <lcd_clk>
 5a4:	84 e2       	ldi	r24, 0x24	; 36
 5a6:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5aa:	8c e2       	ldi	r24, 0x2C	; 44
 5ac:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5b0:	88 e0       	ldi	r24, 0x08	; 8
 5b2:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5c2:	8f e0       	ldi	r24, 0x0F	; 15
 5c4:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5c8:	80 ed       	ldi	r24, 0xD0	; 208
 5ca:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 5ce:	2c 9a       	sbi	0x05, 4	; 5
 5d0:	08 95       	ret

000005d2 <lcd_putc>:
 5d2:	3f 92       	push	r3
 5d4:	4f 92       	push	r4
 5d6:	5f 92       	push	r5
 5d8:	6f 92       	push	r6
 5da:	7f 92       	push	r7
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	e0 97       	sbiw	r28, 0x30	; 48
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	8a 30       	cpi	r24, 0x0A	; 10
 606:	09 f4       	brne	.+2      	; 0x60a <lcd_putc+0x38>
 608:	81 c0       	rjmp	.+258    	; 0x70c <lcd_putc+0x13a>
 60a:	38 2e       	mov	r3, r24
 60c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 610:	81 11       	cpse	r24, r1
 612:	1d c0       	rjmp	.+58     	; 0x64e <lcd_putc+0x7c>
 614:	83 2d       	mov	r24, r3
 616:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_dwrite>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	e0 96       	adiw	r28, 0x30	; 48
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	cf 90       	pop	r12
 63a:	bf 90       	pop	r11
 63c:	af 90       	pop	r10
 63e:	9f 90       	pop	r9
 640:	8f 90       	pop	r8
 642:	7f 90       	pop	r7
 644:	6f 90       	pop	r6
 646:	5f 90       	pop	r5
 648:	4f 90       	pop	r4
 64a:	3f 90       	pop	r3
 64c:	08 95       	ret
 64e:	80 ec       	ldi	r24, 0xC0	; 192
 650:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 654:	8e 01       	movw	r16, r28
 656:	0f 5f       	subi	r16, 0xFF	; 255
 658:	1f 4f       	sbci	r17, 0xFF	; 255
 65a:	4e 01       	movw	r8, r28
 65c:	81 e1       	ldi	r24, 0x11	; 17
 65e:	88 0e       	add	r8, r24
 660:	91 1c       	adc	r9, r1
 662:	78 01       	movw	r14, r16
 664:	0e 94 49 02 	call	0x492	; 0x492 <lcd_dread>
 668:	f7 01       	movw	r30, r14
 66a:	81 93       	st	Z+, r24
 66c:	7f 01       	movw	r14, r30
 66e:	e8 15       	cp	r30, r8
 670:	f9 05       	cpc	r31, r9
 672:	c1 f7       	brne	.-16     	; 0x664 <lcd_putc+0x92>
 674:	80 e9       	ldi	r24, 0x90	; 144
 676:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 67a:	64 01       	movw	r12, r8
 67c:	5e 01       	movw	r10, r28
 67e:	f1 e2       	ldi	r31, 0x21	; 33
 680:	af 0e       	add	r10, r31
 682:	b1 1c       	adc	r11, r1
 684:	74 01       	movw	r14, r8
 686:	0e 94 49 02 	call	0x492	; 0x492 <lcd_dread>
 68a:	f7 01       	movw	r30, r14
 68c:	81 93       	st	Z+, r24
 68e:	7f 01       	movw	r14, r30
 690:	ea 15       	cp	r30, r10
 692:	fb 05       	cpc	r31, r11
 694:	c1 f7       	brne	.-16     	; 0x686 <lcd_putc+0xb4>
 696:	80 ed       	ldi	r24, 0xD0	; 208
 698:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 69c:	75 01       	movw	r14, r10
 69e:	3e 01       	movw	r6, r28
 6a0:	f1 e3       	ldi	r31, 0x31	; 49
 6a2:	6f 0e       	add	r6, r31
 6a4:	71 1c       	adc	r7, r1
 6a6:	25 01       	movw	r4, r10
 6a8:	0e 94 49 02 	call	0x492	; 0x492 <lcd_dread>
 6ac:	f2 01       	movw	r30, r4
 6ae:	81 93       	st	Z+, r24
 6b0:	2f 01       	movw	r4, r30
 6b2:	e6 15       	cp	r30, r6
 6b4:	f7 05       	cpc	r31, r7
 6b6:	c1 f7       	brne	.-16     	; 0x6a8 <lcd_putc+0xd6>
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 6be:	80 e8       	ldi	r24, 0x80	; 128
 6c0:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 6c4:	f8 01       	movw	r30, r16
 6c6:	81 91       	ld	r24, Z+
 6c8:	8f 01       	movw	r16, r30
 6ca:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_dwrite>
 6ce:	80 16       	cp	r8, r16
 6d0:	91 06       	cpc	r9, r17
 6d2:	c1 f7       	brne	.-16     	; 0x6c4 <lcd_putc+0xf2>
 6d4:	80 ec       	ldi	r24, 0xC0	; 192
 6d6:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 6da:	f6 01       	movw	r30, r12
 6dc:	81 91       	ld	r24, Z+
 6de:	6f 01       	movw	r12, r30
 6e0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_dwrite>
 6e4:	ac 14       	cp	r10, r12
 6e6:	bd 04       	cpc	r11, r13
 6e8:	c1 f7       	brne	.-16     	; 0x6da <lcd_putc+0x108>
 6ea:	80 e9       	ldi	r24, 0x90	; 144
 6ec:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 6f0:	f7 01       	movw	r30, r14
 6f2:	81 91       	ld	r24, Z+
 6f4:	7f 01       	movw	r14, r30
 6f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_dwrite>
 6fa:	6e 14       	cp	r6, r14
 6fc:	7f 04       	cpc	r7, r15
 6fe:	c1 f7       	brne	.-16     	; 0x6f0 <lcd_putc+0x11e>
 700:	80 ed       	ldi	r24, 0xD0	; 208
 702:	0e 94 81 02 	call	0x502	; 0x502 <lcd_iwrite>
 706:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
 70a:	84 cf       	rjmp	.-248    	; 0x614 <lcd_putc+0x42>
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 712:	83 cf       	rjmp	.-250    	; 0x61a <lcd_putc+0x48>

00000714 <__adddi3_s8>:
 714:	00 24       	eor	r0, r0
 716:	a7 fd       	sbrc	r26, 7
 718:	00 94       	com	r0
 71a:	2a 0f       	add	r18, r26
 71c:	30 1d       	adc	r19, r0
 71e:	40 1d       	adc	r20, r0
 720:	50 1d       	adc	r21, r0
 722:	60 1d       	adc	r22, r0
 724:	70 1d       	adc	r23, r0
 726:	80 1d       	adc	r24, r0
 728:	90 1d       	adc	r25, r0
 72a:	08 95       	ret

0000072c <__cmpdi2_s8>:
 72c:	00 24       	eor	r0, r0
 72e:	a7 fd       	sbrc	r26, 7
 730:	00 94       	com	r0
 732:	2a 17       	cp	r18, r26
 734:	30 05       	cpc	r19, r0
 736:	40 05       	cpc	r20, r0
 738:	50 05       	cpc	r21, r0
 73a:	60 05       	cpc	r22, r0
 73c:	70 05       	cpc	r23, r0
 73e:	80 05       	cpc	r24, r0
 740:	90 05       	cpc	r25, r0
 742:	08 95       	ret

00000744 <printf>:
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e8 ea       	ldi	r30, 0xA8	; 168
 74a:	f3 e0       	ldi	r31, 0x03	; 3
 74c:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__prologue_saves__+0x20>
 750:	ae 01       	movw	r20, r28
 752:	4b 5f       	subi	r20, 0xFB	; 251
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	fa 01       	movw	r30, r20
 758:	61 91       	ld	r22, Z+
 75a:	71 91       	ld	r23, Z+
 75c:	af 01       	movw	r20, r30
 75e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__iob+0x2>
 762:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__iob+0x3>
 766:	0e 94 bf 03 	call	0x77e	; 0x77e <vfprintf>
 76a:	e2 e0       	ldi	r30, 0x02	; 2
 76c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__epilogue_restores__+0x20>

00000770 <putchar>:
 770:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <__iob+0x2>
 774:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <__iob+0x3>
 778:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 77c:	08 95       	ret

0000077e <vfprintf>:
 77e:	ab e0       	ldi	r26, 0x0B	; 11
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e5 ec       	ldi	r30, 0xC5	; 197
 784:	f3 e0       	ldi	r31, 0x03	; 3
 786:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__prologue_saves__>
 78a:	6c 01       	movw	r12, r24
 78c:	7b 01       	movw	r14, r22
 78e:	8a 01       	movw	r16, r20
 790:	fc 01       	movw	r30, r24
 792:	17 82       	std	Z+7, r1	; 0x07
 794:	16 82       	std	Z+6, r1	; 0x06
 796:	83 81       	ldd	r24, Z+3	; 0x03
 798:	81 ff       	sbrs	r24, 1
 79a:	cc c1       	rjmp	.+920    	; 0xb34 <__stack+0x235>
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	3c 01       	movw	r6, r24
 7a2:	f6 01       	movw	r30, r12
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	f7 01       	movw	r30, r14
 7a8:	93 fd       	sbrc	r25, 3
 7aa:	85 91       	lpm	r24, Z+
 7ac:	93 ff       	sbrs	r25, 3
 7ae:	81 91       	ld	r24, Z+
 7b0:	7f 01       	movw	r14, r30
 7b2:	88 23       	and	r24, r24
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <vfprintf+0x3a>
 7b6:	ba c1       	rjmp	.+884    	; 0xb2c <__stack+0x22d>
 7b8:	85 32       	cpi	r24, 0x25	; 37
 7ba:	39 f4       	brne	.+14     	; 0x7ca <vfprintf+0x4c>
 7bc:	93 fd       	sbrc	r25, 3
 7be:	85 91       	lpm	r24, Z+
 7c0:	93 ff       	sbrs	r25, 3
 7c2:	81 91       	ld	r24, Z+
 7c4:	7f 01       	movw	r14, r30
 7c6:	85 32       	cpi	r24, 0x25	; 37
 7c8:	29 f4       	brne	.+10     	; 0x7d4 <vfprintf+0x56>
 7ca:	b6 01       	movw	r22, r12
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 7d2:	e7 cf       	rjmp	.-50     	; 0x7a2 <vfprintf+0x24>
 7d4:	91 2c       	mov	r9, r1
 7d6:	21 2c       	mov	r2, r1
 7d8:	31 2c       	mov	r3, r1
 7da:	ff e1       	ldi	r31, 0x1F	; 31
 7dc:	f3 15       	cp	r31, r3
 7de:	d8 f0       	brcs	.+54     	; 0x816 <vfprintf+0x98>
 7e0:	8b 32       	cpi	r24, 0x2B	; 43
 7e2:	79 f0       	breq	.+30     	; 0x802 <vfprintf+0x84>
 7e4:	38 f4       	brcc	.+14     	; 0x7f4 <vfprintf+0x76>
 7e6:	80 32       	cpi	r24, 0x20	; 32
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0x8a>
 7ea:	83 32       	cpi	r24, 0x23	; 35
 7ec:	a1 f4       	brne	.+40     	; 0x816 <vfprintf+0x98>
 7ee:	23 2d       	mov	r18, r3
 7f0:	20 61       	ori	r18, 0x10	; 16
 7f2:	1d c0       	rjmp	.+58     	; 0x82e <vfprintf+0xb0>
 7f4:	8d 32       	cpi	r24, 0x2D	; 45
 7f6:	61 f0       	breq	.+24     	; 0x810 <vfprintf+0x92>
 7f8:	80 33       	cpi	r24, 0x30	; 48
 7fa:	69 f4       	brne	.+26     	; 0x816 <vfprintf+0x98>
 7fc:	23 2d       	mov	r18, r3
 7fe:	21 60       	ori	r18, 0x01	; 1
 800:	16 c0       	rjmp	.+44     	; 0x82e <vfprintf+0xb0>
 802:	83 2d       	mov	r24, r3
 804:	82 60       	ori	r24, 0x02	; 2
 806:	38 2e       	mov	r3, r24
 808:	e3 2d       	mov	r30, r3
 80a:	e4 60       	ori	r30, 0x04	; 4
 80c:	3e 2e       	mov	r3, r30
 80e:	2a c0       	rjmp	.+84     	; 0x864 <vfprintf+0xe6>
 810:	f3 2d       	mov	r31, r3
 812:	f8 60       	ori	r31, 0x08	; 8
 814:	1d c0       	rjmp	.+58     	; 0x850 <vfprintf+0xd2>
 816:	37 fc       	sbrc	r3, 7
 818:	2d c0       	rjmp	.+90     	; 0x874 <vfprintf+0xf6>
 81a:	20 ed       	ldi	r18, 0xD0	; 208
 81c:	28 0f       	add	r18, r24
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	40 f0       	brcs	.+16     	; 0x832 <vfprintf+0xb4>
 822:	8e 32       	cpi	r24, 0x2E	; 46
 824:	b9 f4       	brne	.+46     	; 0x854 <vfprintf+0xd6>
 826:	36 fc       	sbrc	r3, 6
 828:	81 c1       	rjmp	.+770    	; 0xb2c <__stack+0x22d>
 82a:	23 2d       	mov	r18, r3
 82c:	20 64       	ori	r18, 0x40	; 64
 82e:	32 2e       	mov	r3, r18
 830:	19 c0       	rjmp	.+50     	; 0x864 <vfprintf+0xe6>
 832:	36 fe       	sbrs	r3, 6
 834:	06 c0       	rjmp	.+12     	; 0x842 <vfprintf+0xc4>
 836:	8a e0       	ldi	r24, 0x0A	; 10
 838:	98 9e       	mul	r9, r24
 83a:	20 0d       	add	r18, r0
 83c:	11 24       	eor	r1, r1
 83e:	92 2e       	mov	r9, r18
 840:	11 c0       	rjmp	.+34     	; 0x864 <vfprintf+0xe6>
 842:	ea e0       	ldi	r30, 0x0A	; 10
 844:	2e 9e       	mul	r2, r30
 846:	20 0d       	add	r18, r0
 848:	11 24       	eor	r1, r1
 84a:	22 2e       	mov	r2, r18
 84c:	f3 2d       	mov	r31, r3
 84e:	f0 62       	ori	r31, 0x20	; 32
 850:	3f 2e       	mov	r3, r31
 852:	08 c0       	rjmp	.+16     	; 0x864 <vfprintf+0xe6>
 854:	8c 36       	cpi	r24, 0x6C	; 108
 856:	21 f4       	brne	.+8      	; 0x860 <vfprintf+0xe2>
 858:	83 2d       	mov	r24, r3
 85a:	80 68       	ori	r24, 0x80	; 128
 85c:	38 2e       	mov	r3, r24
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0xe6>
 860:	88 36       	cpi	r24, 0x68	; 104
 862:	41 f4       	brne	.+16     	; 0x874 <vfprintf+0xf6>
 864:	f7 01       	movw	r30, r14
 866:	93 fd       	sbrc	r25, 3
 868:	85 91       	lpm	r24, Z+
 86a:	93 ff       	sbrs	r25, 3
 86c:	81 91       	ld	r24, Z+
 86e:	7f 01       	movw	r14, r30
 870:	81 11       	cpse	r24, r1
 872:	b3 cf       	rjmp	.-154    	; 0x7da <vfprintf+0x5c>
 874:	98 2f       	mov	r25, r24
 876:	9f 7d       	andi	r25, 0xDF	; 223
 878:	95 54       	subi	r25, 0x45	; 69
 87a:	93 30       	cpi	r25, 0x03	; 3
 87c:	28 f4       	brcc	.+10     	; 0x888 <vfprintf+0x10a>
 87e:	0c 5f       	subi	r16, 0xFC	; 252
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	9f e3       	ldi	r25, 0x3F	; 63
 884:	99 83       	std	Y+1, r25	; 0x01
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <vfprintf+0x124>
 888:	83 36       	cpi	r24, 0x63	; 99
 88a:	31 f0       	breq	.+12     	; 0x898 <vfprintf+0x11a>
 88c:	83 37       	cpi	r24, 0x73	; 115
 88e:	71 f0       	breq	.+28     	; 0x8ac <vfprintf+0x12e>
 890:	83 35       	cpi	r24, 0x53	; 83
 892:	09 f0       	breq	.+2      	; 0x896 <vfprintf+0x118>
 894:	59 c0       	rjmp	.+178    	; 0x948 <__stack+0x49>
 896:	21 c0       	rjmp	.+66     	; 0x8da <vfprintf+0x15c>
 898:	f8 01       	movw	r30, r16
 89a:	80 81       	ld	r24, Z
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	88 24       	eor	r8, r8
 8a4:	83 94       	inc	r8
 8a6:	91 2c       	mov	r9, r1
 8a8:	53 01       	movw	r10, r6
 8aa:	13 c0       	rjmp	.+38     	; 0x8d2 <vfprintf+0x154>
 8ac:	28 01       	movw	r4, r16
 8ae:	f2 e0       	ldi	r31, 0x02	; 2
 8b0:	4f 0e       	add	r4, r31
 8b2:	51 1c       	adc	r5, r1
 8b4:	f8 01       	movw	r30, r16
 8b6:	a0 80       	ld	r10, Z
 8b8:	b1 80       	ldd	r11, Z+1	; 0x01
 8ba:	36 fe       	sbrs	r3, 6
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x146>
 8be:	69 2d       	mov	r22, r9
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x14a>
 8c4:	6f ef       	ldi	r22, 0xFF	; 255
 8c6:	7f ef       	ldi	r23, 0xFF	; 255
 8c8:	c5 01       	movw	r24, r10
 8ca:	0e 94 ab 05 	call	0xb56	; 0xb56 <strnlen>
 8ce:	4c 01       	movw	r8, r24
 8d0:	82 01       	movw	r16, r4
 8d2:	f3 2d       	mov	r31, r3
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	3f 2e       	mov	r3, r31
 8d8:	16 c0       	rjmp	.+44     	; 0x906 <__stack+0x7>
 8da:	28 01       	movw	r4, r16
 8dc:	22 e0       	ldi	r18, 0x02	; 2
 8de:	42 0e       	add	r4, r18
 8e0:	51 1c       	adc	r5, r1
 8e2:	f8 01       	movw	r30, r16
 8e4:	a0 80       	ld	r10, Z
 8e6:	b1 80       	ldd	r11, Z+1	; 0x01
 8e8:	36 fe       	sbrs	r3, 6
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <vfprintf+0x174>
 8ec:	69 2d       	mov	r22, r9
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x178>
 8f2:	6f ef       	ldi	r22, 0xFF	; 255
 8f4:	7f ef       	ldi	r23, 0xFF	; 255
 8f6:	c5 01       	movw	r24, r10
 8f8:	0e 94 a0 05 	call	0xb40	; 0xb40 <strnlen_P>
 8fc:	4c 01       	movw	r8, r24
 8fe:	f3 2d       	mov	r31, r3
 900:	f0 68       	ori	r31, 0x80	; 128
 902:	3f 2e       	mov	r3, r31
 904:	82 01       	movw	r16, r4
 906:	33 fc       	sbrc	r3, 3
 908:	1b c0       	rjmp	.+54     	; 0x940 <__stack+0x41>
 90a:	82 2d       	mov	r24, r2
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	88 16       	cp	r8, r24
 910:	99 06       	cpc	r9, r25
 912:	b0 f4       	brcc	.+44     	; 0x940 <__stack+0x41>
 914:	b6 01       	movw	r22, r12
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 91e:	2a 94       	dec	r2
 920:	f4 cf       	rjmp	.-24     	; 0x90a <__stack+0xb>
 922:	f5 01       	movw	r30, r10
 924:	37 fc       	sbrc	r3, 7
 926:	85 91       	lpm	r24, Z+
 928:	37 fe       	sbrs	r3, 7
 92a:	81 91       	ld	r24, Z+
 92c:	5f 01       	movw	r10, r30
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 936:	21 10       	cpse	r2, r1
 938:	2a 94       	dec	r2
 93a:	21 e0       	ldi	r18, 0x01	; 1
 93c:	82 1a       	sub	r8, r18
 93e:	91 08       	sbc	r9, r1
 940:	81 14       	cp	r8, r1
 942:	91 04       	cpc	r9, r1
 944:	71 f7       	brne	.-36     	; 0x922 <__stack+0x23>
 946:	e8 c0       	rjmp	.+464    	; 0xb18 <__stack+0x219>
 948:	84 36       	cpi	r24, 0x64	; 100
 94a:	11 f0       	breq	.+4      	; 0x950 <__stack+0x51>
 94c:	89 36       	cpi	r24, 0x69	; 105
 94e:	41 f5       	brne	.+80     	; 0x9a0 <__stack+0xa1>
 950:	f8 01       	movw	r30, r16
 952:	37 fe       	sbrs	r3, 7
 954:	07 c0       	rjmp	.+14     	; 0x964 <__stack+0x65>
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	82 81       	ldd	r24, Z+2	; 0x02
 95c:	93 81       	ldd	r25, Z+3	; 0x03
 95e:	0c 5f       	subi	r16, 0xFC	; 252
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	08 c0       	rjmp	.+16     	; 0x974 <__stack+0x75>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	07 2e       	mov	r0, r23
 96a:	00 0c       	add	r0, r0
 96c:	88 0b       	sbc	r24, r24
 96e:	99 0b       	sbc	r25, r25
 970:	0e 5f       	subi	r16, 0xFE	; 254
 972:	1f 4f       	sbci	r17, 0xFF	; 255
 974:	f3 2d       	mov	r31, r3
 976:	ff 76       	andi	r31, 0x6F	; 111
 978:	3f 2e       	mov	r3, r31
 97a:	97 ff       	sbrs	r25, 7
 97c:	09 c0       	rjmp	.+18     	; 0x990 <__stack+0x91>
 97e:	90 95       	com	r25
 980:	80 95       	com	r24
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	8f 4f       	sbci	r24, 0xFF	; 255
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	f0 68       	ori	r31, 0x80	; 128
 98e:	3f 2e       	mov	r3, r31
 990:	2a e0       	ldi	r18, 0x0A	; 10
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	a3 01       	movw	r20, r6
 996:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__ultoa_invert>
 99a:	88 2e       	mov	r8, r24
 99c:	86 18       	sub	r8, r6
 99e:	45 c0       	rjmp	.+138    	; 0xa2a <__stack+0x12b>
 9a0:	85 37       	cpi	r24, 0x75	; 117
 9a2:	31 f4       	brne	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	23 2d       	mov	r18, r3
 9a6:	2f 7e       	andi	r18, 0xEF	; 239
 9a8:	b2 2e       	mov	r11, r18
 9aa:	2a e0       	ldi	r18, 0x0A	; 10
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	25 c0       	rjmp	.+74     	; 0x9fa <__stack+0xfb>
 9b0:	93 2d       	mov	r25, r3
 9b2:	99 7f       	andi	r25, 0xF9	; 249
 9b4:	b9 2e       	mov	r11, r25
 9b6:	8f 36       	cpi	r24, 0x6F	; 111
 9b8:	c1 f0       	breq	.+48     	; 0x9ea <__stack+0xeb>
 9ba:	18 f4       	brcc	.+6      	; 0x9c2 <__stack+0xc3>
 9bc:	88 35       	cpi	r24, 0x58	; 88
 9be:	79 f0       	breq	.+30     	; 0x9de <__stack+0xdf>
 9c0:	b5 c0       	rjmp	.+362    	; 0xb2c <__stack+0x22d>
 9c2:	80 37       	cpi	r24, 0x70	; 112
 9c4:	19 f0       	breq	.+6      	; 0x9cc <__stack+0xcd>
 9c6:	88 37       	cpi	r24, 0x78	; 120
 9c8:	21 f0       	breq	.+8      	; 0x9d2 <__stack+0xd3>
 9ca:	b0 c0       	rjmp	.+352    	; 0xb2c <__stack+0x22d>
 9cc:	e9 2f       	mov	r30, r25
 9ce:	e0 61       	ori	r30, 0x10	; 16
 9d0:	be 2e       	mov	r11, r30
 9d2:	b4 fe       	sbrs	r11, 4
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__stack+0xf1>
 9d6:	fb 2d       	mov	r31, r11
 9d8:	f4 60       	ori	r31, 0x04	; 4
 9da:	bf 2e       	mov	r11, r31
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__stack+0xf1>
 9de:	34 fe       	sbrs	r3, 4
 9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <__stack+0xf7>
 9e2:	29 2f       	mov	r18, r25
 9e4:	26 60       	ori	r18, 0x06	; 6
 9e6:	b2 2e       	mov	r11, r18
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
 9ea:	28 e0       	ldi	r18, 0x08	; 8
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <__stack+0xfb>
 9f0:	20 e1       	ldi	r18, 0x10	; 16
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0xfb>
 9f6:	20 e1       	ldi	r18, 0x10	; 16
 9f8:	32 e0       	ldi	r19, 0x02	; 2
 9fa:	f8 01       	movw	r30, r16
 9fc:	b7 fe       	sbrs	r11, 7
 9fe:	07 c0       	rjmp	.+14     	; 0xa0e <__stack+0x10f>
 a00:	60 81       	ld	r22, Z
 a02:	71 81       	ldd	r23, Z+1	; 0x01
 a04:	82 81       	ldd	r24, Z+2	; 0x02
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	0c 5f       	subi	r16, 0xFC	; 252
 a0a:	1f 4f       	sbci	r17, 0xFF	; 255
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x11b>
 a0e:	60 81       	ld	r22, Z
 a10:	71 81       	ldd	r23, Z+1	; 0x01
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 5f       	subi	r16, 0xFE	; 254
 a18:	1f 4f       	sbci	r17, 0xFF	; 255
 a1a:	a3 01       	movw	r20, r6
 a1c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__ultoa_invert>
 a20:	88 2e       	mov	r8, r24
 a22:	86 18       	sub	r8, r6
 a24:	fb 2d       	mov	r31, r11
 a26:	ff 77       	andi	r31, 0x7F	; 127
 a28:	3f 2e       	mov	r3, r31
 a2a:	36 fe       	sbrs	r3, 6
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__stack+0x149>
 a2e:	23 2d       	mov	r18, r3
 a30:	2e 7f       	andi	r18, 0xFE	; 254
 a32:	a2 2e       	mov	r10, r18
 a34:	89 14       	cp	r8, r9
 a36:	58 f4       	brcc	.+22     	; 0xa4e <__stack+0x14f>
 a38:	34 fe       	sbrs	r3, 4
 a3a:	0b c0       	rjmp	.+22     	; 0xa52 <__stack+0x153>
 a3c:	32 fc       	sbrc	r3, 2
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__stack+0x153>
 a40:	83 2d       	mov	r24, r3
 a42:	8e 7e       	andi	r24, 0xEE	; 238
 a44:	a8 2e       	mov	r10, r24
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <__stack+0x153>
 a48:	b8 2c       	mov	r11, r8
 a4a:	a3 2c       	mov	r10, r3
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <__stack+0x155>
 a4e:	b8 2c       	mov	r11, r8
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <__stack+0x155>
 a52:	b9 2c       	mov	r11, r9
 a54:	a4 fe       	sbrs	r10, 4
 a56:	0f c0       	rjmp	.+30     	; 0xa76 <__stack+0x177>
 a58:	fe 01       	movw	r30, r28
 a5a:	e8 0d       	add	r30, r8
 a5c:	f1 1d       	adc	r31, r1
 a5e:	80 81       	ld	r24, Z
 a60:	80 33       	cpi	r24, 0x30	; 48
 a62:	21 f4       	brne	.+8      	; 0xa6c <__stack+0x16d>
 a64:	9a 2d       	mov	r25, r10
 a66:	99 7e       	andi	r25, 0xE9	; 233
 a68:	a9 2e       	mov	r10, r25
 a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__stack+0x17f>
 a6c:	a2 fe       	sbrs	r10, 2
 a6e:	06 c0       	rjmp	.+12     	; 0xa7c <__stack+0x17d>
 a70:	b3 94       	inc	r11
 a72:	b3 94       	inc	r11
 a74:	04 c0       	rjmp	.+8      	; 0xa7e <__stack+0x17f>
 a76:	8a 2d       	mov	r24, r10
 a78:	86 78       	andi	r24, 0x86	; 134
 a7a:	09 f0       	breq	.+2      	; 0xa7e <__stack+0x17f>
 a7c:	b3 94       	inc	r11
 a7e:	a3 fc       	sbrc	r10, 3
 a80:	11 c0       	rjmp	.+34     	; 0xaa4 <__stack+0x1a5>
 a82:	a0 fe       	sbrs	r10, 0
 a84:	06 c0       	rjmp	.+12     	; 0xa92 <__stack+0x193>
 a86:	b2 14       	cp	r11, r2
 a88:	88 f4       	brcc	.+34     	; 0xaac <__stack+0x1ad>
 a8a:	28 0c       	add	r2, r8
 a8c:	92 2c       	mov	r9, r2
 a8e:	9b 18       	sub	r9, r11
 a90:	0e c0       	rjmp	.+28     	; 0xaae <__stack+0x1af>
 a92:	b2 14       	cp	r11, r2
 a94:	60 f4       	brcc	.+24     	; 0xaae <__stack+0x1af>
 a96:	b6 01       	movw	r22, r12
 a98:	80 e2       	ldi	r24, 0x20	; 32
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 aa0:	b3 94       	inc	r11
 aa2:	f7 cf       	rjmp	.-18     	; 0xa92 <__stack+0x193>
 aa4:	b2 14       	cp	r11, r2
 aa6:	18 f4       	brcc	.+6      	; 0xaae <__stack+0x1af>
 aa8:	2b 18       	sub	r2, r11
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <__stack+0x1b1>
 aac:	98 2c       	mov	r9, r8
 aae:	21 2c       	mov	r2, r1
 ab0:	a4 fe       	sbrs	r10, 4
 ab2:	10 c0       	rjmp	.+32     	; 0xad4 <__stack+0x1d5>
 ab4:	b6 01       	movw	r22, r12
 ab6:	80 e3       	ldi	r24, 0x30	; 48
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 abe:	a2 fe       	sbrs	r10, 2
 ac0:	17 c0       	rjmp	.+46     	; 0xaf0 <__stack+0x1f1>
 ac2:	a1 fc       	sbrc	r10, 1
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <__stack+0x1cd>
 ac6:	88 e7       	ldi	r24, 0x78	; 120
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <__stack+0x1d1>
 acc:	88 e5       	ldi	r24, 0x58	; 88
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	b6 01       	movw	r22, r12
 ad2:	0c c0       	rjmp	.+24     	; 0xaec <__stack+0x1ed>
 ad4:	8a 2d       	mov	r24, r10
 ad6:	86 78       	andi	r24, 0x86	; 134
 ad8:	59 f0       	breq	.+22     	; 0xaf0 <__stack+0x1f1>
 ada:	a1 fe       	sbrs	r10, 1
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <__stack+0x1e3>
 ade:	8b e2       	ldi	r24, 0x2B	; 43
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <__stack+0x1e5>
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	a7 fc       	sbrc	r10, 7
 ae6:	8d e2       	ldi	r24, 0x2D	; 45
 ae8:	b6 01       	movw	r22, r12
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 af0:	89 14       	cp	r8, r9
 af2:	38 f4       	brcc	.+14     	; 0xb02 <__stack+0x203>
 af4:	b6 01       	movw	r22, r12
 af6:	80 e3       	ldi	r24, 0x30	; 48
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 afe:	9a 94       	dec	r9
 b00:	f7 cf       	rjmp	.-18     	; 0xaf0 <__stack+0x1f1>
 b02:	8a 94       	dec	r8
 b04:	f3 01       	movw	r30, r6
 b06:	e8 0d       	add	r30, r8
 b08:	f1 1d       	adc	r31, r1
 b0a:	80 81       	ld	r24, Z
 b0c:	b6 01       	movw	r22, r12
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 b14:	81 10       	cpse	r8, r1
 b16:	f5 cf       	rjmp	.-22     	; 0xb02 <__stack+0x203>
 b18:	22 20       	and	r2, r2
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__stack+0x21f>
 b1c:	42 ce       	rjmp	.-892    	; 0x7a2 <vfprintf+0x24>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 b6 05 	call	0xb6c	; 0xb6c <fputc>
 b28:	2a 94       	dec	r2
 b2a:	f6 cf       	rjmp	.-20     	; 0xb18 <__stack+0x219>
 b2c:	f6 01       	movw	r30, r12
 b2e:	86 81       	ldd	r24, Z+6	; 0x06
 b30:	97 81       	ldd	r25, Z+7	; 0x07
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <__stack+0x239>
 b34:	8f ef       	ldi	r24, 0xFF	; 255
 b36:	9f ef       	ldi	r25, 0xFF	; 255
 b38:	2b 96       	adiw	r28, 0x0b	; 11
 b3a:	e2 e1       	ldi	r30, 0x12	; 18
 b3c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__epilogue_restores__>

00000b40 <strnlen_P>:
 b40:	fc 01       	movw	r30, r24
 b42:	05 90       	lpm	r0, Z+
 b44:	61 50       	subi	r22, 0x01	; 1
 b46:	70 40       	sbci	r23, 0x00	; 0
 b48:	01 10       	cpse	r0, r1
 b4a:	d8 f7       	brcc	.-10     	; 0xb42 <strnlen_P+0x2>
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	8e 0f       	add	r24, r30
 b52:	9f 1f       	adc	r25, r31
 b54:	08 95       	ret

00000b56 <strnlen>:
 b56:	fc 01       	movw	r30, r24
 b58:	61 50       	subi	r22, 0x01	; 1
 b5a:	70 40       	sbci	r23, 0x00	; 0
 b5c:	01 90       	ld	r0, Z+
 b5e:	01 10       	cpse	r0, r1
 b60:	d8 f7       	brcc	.-10     	; 0xb58 <strnlen+0x2>
 b62:	80 95       	com	r24
 b64:	90 95       	com	r25
 b66:	8e 0f       	add	r24, r30
 b68:	9f 1f       	adc	r25, r31
 b6a:	08 95       	ret

00000b6c <fputc>:
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	fb 01       	movw	r30, r22
 b76:	23 81       	ldd	r18, Z+3	; 0x03
 b78:	21 fd       	sbrc	r18, 1
 b7a:	03 c0       	rjmp	.+6      	; 0xb82 <fputc+0x16>
 b7c:	8f ef       	ldi	r24, 0xFF	; 255
 b7e:	9f ef       	ldi	r25, 0xFF	; 255
 b80:	2c c0       	rjmp	.+88     	; 0xbda <fputc+0x6e>
 b82:	22 ff       	sbrs	r18, 2
 b84:	16 c0       	rjmp	.+44     	; 0xbb2 <fputc+0x46>
 b86:	46 81       	ldd	r20, Z+6	; 0x06
 b88:	57 81       	ldd	r21, Z+7	; 0x07
 b8a:	24 81       	ldd	r18, Z+4	; 0x04
 b8c:	35 81       	ldd	r19, Z+5	; 0x05
 b8e:	42 17       	cp	r20, r18
 b90:	53 07       	cpc	r21, r19
 b92:	44 f4       	brge	.+16     	; 0xba4 <fputc+0x38>
 b94:	a0 81       	ld	r26, Z
 b96:	b1 81       	ldd	r27, Z+1	; 0x01
 b98:	9d 01       	movw	r18, r26
 b9a:	2f 5f       	subi	r18, 0xFF	; 255
 b9c:	3f 4f       	sbci	r19, 0xFF	; 255
 b9e:	31 83       	std	Z+1, r19	; 0x01
 ba0:	20 83       	st	Z, r18
 ba2:	8c 93       	st	X, r24
 ba4:	26 81       	ldd	r18, Z+6	; 0x06
 ba6:	37 81       	ldd	r19, Z+7	; 0x07
 ba8:	2f 5f       	subi	r18, 0xFF	; 255
 baa:	3f 4f       	sbci	r19, 0xFF	; 255
 bac:	37 83       	std	Z+7, r19	; 0x07
 bae:	26 83       	std	Z+6, r18	; 0x06
 bb0:	14 c0       	rjmp	.+40     	; 0xbda <fputc+0x6e>
 bb2:	8b 01       	movw	r16, r22
 bb4:	ec 01       	movw	r28, r24
 bb6:	fb 01       	movw	r30, r22
 bb8:	00 84       	ldd	r0, Z+8	; 0x08
 bba:	f1 85       	ldd	r31, Z+9	; 0x09
 bbc:	e0 2d       	mov	r30, r0
 bbe:	09 95       	icall
 bc0:	89 2b       	or	r24, r25
 bc2:	e1 f6       	brne	.-72     	; 0xb7c <fputc+0x10>
 bc4:	d8 01       	movw	r26, r16
 bc6:	16 96       	adiw	r26, 0x06	; 6
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	17 97       	sbiw	r26, 0x07	; 7
 bce:	01 96       	adiw	r24, 0x01	; 1
 bd0:	17 96       	adiw	r26, 0x07	; 7
 bd2:	9c 93       	st	X, r25
 bd4:	8e 93       	st	-X, r24
 bd6:	16 97       	sbiw	r26, 0x06	; 6
 bd8:	ce 01       	movw	r24, r28
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	08 95       	ret

00000be4 <__ultoa_invert>:
 be4:	fa 01       	movw	r30, r20
 be6:	aa 27       	eor	r26, r26
 be8:	28 30       	cpi	r18, 0x08	; 8
 bea:	51 f1       	breq	.+84     	; 0xc40 <__ultoa_invert+0x5c>
 bec:	20 31       	cpi	r18, 0x10	; 16
 bee:	81 f1       	breq	.+96     	; 0xc50 <__ultoa_invert+0x6c>
 bf0:	e8 94       	clt
 bf2:	6f 93       	push	r22
 bf4:	6e 7f       	andi	r22, 0xFE	; 254
 bf6:	6e 5f       	subi	r22, 0xFE	; 254
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	af 4f       	sbci	r26, 0xFF	; 255
 c00:	b1 e0       	ldi	r27, 0x01	; 1
 c02:	3e d0       	rcall	.+124    	; 0xc80 <__ultoa_invert+0x9c>
 c04:	b4 e0       	ldi	r27, 0x04	; 4
 c06:	3c d0       	rcall	.+120    	; 0xc80 <__ultoa_invert+0x9c>
 c08:	67 0f       	add	r22, r23
 c0a:	78 1f       	adc	r23, r24
 c0c:	89 1f       	adc	r24, r25
 c0e:	9a 1f       	adc	r25, r26
 c10:	a1 1d       	adc	r26, r1
 c12:	68 0f       	add	r22, r24
 c14:	79 1f       	adc	r23, r25
 c16:	8a 1f       	adc	r24, r26
 c18:	91 1d       	adc	r25, r1
 c1a:	a1 1d       	adc	r26, r1
 c1c:	6a 0f       	add	r22, r26
 c1e:	71 1d       	adc	r23, r1
 c20:	81 1d       	adc	r24, r1
 c22:	91 1d       	adc	r25, r1
 c24:	a1 1d       	adc	r26, r1
 c26:	20 d0       	rcall	.+64     	; 0xc68 <__ultoa_invert+0x84>
 c28:	09 f4       	brne	.+2      	; 0xc2c <__ultoa_invert+0x48>
 c2a:	68 94       	set
 c2c:	3f 91       	pop	r19
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	26 9f       	mul	r18, r22
 c32:	11 24       	eor	r1, r1
 c34:	30 19       	sub	r19, r0
 c36:	30 5d       	subi	r19, 0xD0	; 208
 c38:	31 93       	st	Z+, r19
 c3a:	de f6       	brtc	.-74     	; 0xbf2 <__ultoa_invert+0xe>
 c3c:	cf 01       	movw	r24, r30
 c3e:	08 95       	ret
 c40:	46 2f       	mov	r20, r22
 c42:	47 70       	andi	r20, 0x07	; 7
 c44:	40 5d       	subi	r20, 0xD0	; 208
 c46:	41 93       	st	Z+, r20
 c48:	b3 e0       	ldi	r27, 0x03	; 3
 c4a:	0f d0       	rcall	.+30     	; 0xc6a <__ultoa_invert+0x86>
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0x5c>
 c4e:	f6 cf       	rjmp	.-20     	; 0xc3c <__ultoa_invert+0x58>
 c50:	46 2f       	mov	r20, r22
 c52:	4f 70       	andi	r20, 0x0F	; 15
 c54:	40 5d       	subi	r20, 0xD0	; 208
 c56:	4a 33       	cpi	r20, 0x3A	; 58
 c58:	18 f0       	brcs	.+6      	; 0xc60 <__ultoa_invert+0x7c>
 c5a:	49 5d       	subi	r20, 0xD9	; 217
 c5c:	31 fd       	sbrc	r19, 1
 c5e:	40 52       	subi	r20, 0x20	; 32
 c60:	41 93       	st	Z+, r20
 c62:	02 d0       	rcall	.+4      	; 0xc68 <__ultoa_invert+0x84>
 c64:	a9 f7       	brne	.-22     	; 0xc50 <__ultoa_invert+0x6c>
 c66:	ea cf       	rjmp	.-44     	; 0xc3c <__ultoa_invert+0x58>
 c68:	b4 e0       	ldi	r27, 0x04	; 4
 c6a:	a6 95       	lsr	r26
 c6c:	97 95       	ror	r25
 c6e:	87 95       	ror	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	ba 95       	dec	r27
 c76:	c9 f7       	brne	.-14     	; 0xc6a <__ultoa_invert+0x86>
 c78:	00 97       	sbiw	r24, 0x00	; 0
 c7a:	61 05       	cpc	r22, r1
 c7c:	71 05       	cpc	r23, r1
 c7e:	08 95       	ret
 c80:	9b 01       	movw	r18, r22
 c82:	ac 01       	movw	r20, r24
 c84:	0a 2e       	mov	r0, r26
 c86:	06 94       	lsr	r0
 c88:	57 95       	ror	r21
 c8a:	47 95       	ror	r20
 c8c:	37 95       	ror	r19
 c8e:	27 95       	ror	r18
 c90:	ba 95       	dec	r27
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__ultoa_invert+0xa2>
 c94:	62 0f       	add	r22, r18
 c96:	73 1f       	adc	r23, r19
 c98:	84 1f       	adc	r24, r20
 c9a:	95 1f       	adc	r25, r21
 c9c:	a0 1d       	adc	r26, r0
 c9e:	08 95       	ret

00000ca0 <__prologue_saves__>:
 ca0:	2f 92       	push	r2
 ca2:	3f 92       	push	r3
 ca4:	4f 92       	push	r4
 ca6:	5f 92       	push	r5
 ca8:	6f 92       	push	r6
 caa:	7f 92       	push	r7
 cac:	8f 92       	push	r8
 cae:	9f 92       	push	r9
 cb0:	af 92       	push	r10
 cb2:	bf 92       	push	r11
 cb4:	cf 92       	push	r12
 cb6:	df 92       	push	r13
 cb8:	ef 92       	push	r14
 cba:	ff 92       	push	r15
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	cd b7       	in	r28, 0x3d	; 61
 cc6:	de b7       	in	r29, 0x3e	; 62
 cc8:	ca 1b       	sub	r28, r26
 cca:	db 0b       	sbc	r29, r27
 ccc:	0f b6       	in	r0, 0x3f	; 63
 cce:	f8 94       	cli
 cd0:	de bf       	out	0x3e, r29	; 62
 cd2:	0f be       	out	0x3f, r0	; 63
 cd4:	cd bf       	out	0x3d, r28	; 61
 cd6:	09 94       	ijmp

00000cd8 <__epilogue_restores__>:
 cd8:	2a 88       	ldd	r2, Y+18	; 0x12
 cda:	39 88       	ldd	r3, Y+17	; 0x11
 cdc:	48 88       	ldd	r4, Y+16	; 0x10
 cde:	5f 84       	ldd	r5, Y+15	; 0x0f
 ce0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ce2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ce4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ce6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ce8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cea:	b9 84       	ldd	r11, Y+9	; 0x09
 cec:	c8 84       	ldd	r12, Y+8	; 0x08
 cee:	df 80       	ldd	r13, Y+7	; 0x07
 cf0:	ee 80       	ldd	r14, Y+6	; 0x06
 cf2:	fd 80       	ldd	r15, Y+5	; 0x05
 cf4:	0c 81       	ldd	r16, Y+4	; 0x04
 cf6:	1b 81       	ldd	r17, Y+3	; 0x03
 cf8:	aa 81       	ldd	r26, Y+2	; 0x02
 cfa:	b9 81       	ldd	r27, Y+1	; 0x01
 cfc:	ce 0f       	add	r28, r30
 cfe:	d1 1d       	adc	r29, r1
 d00:	0f b6       	in	r0, 0x3f	; 63
 d02:	f8 94       	cli
 d04:	de bf       	out	0x3e, r29	; 62
 d06:	0f be       	out	0x3f, r0	; 63
 d08:	cd bf       	out	0x3d, r28	; 61
 d0a:	ed 01       	movw	r28, r26
 d0c:	08 95       	ret

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
